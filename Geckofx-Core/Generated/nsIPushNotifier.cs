// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIPushNotifier.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// Fires XPCOM observer notifications and service worker events for
    /// messages sent to push subscriptions.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("b00dfdeb-14e5-425b-adc7-b531442e3216")]
	public interface nsIPushNotifier
	{
		
		/// <summary>
        /// Fires a `push-message` observer notification, and sends a `push` event to
        /// the service worker registered for the |scope|. |messageId| is an opaque ID
        /// used to report errors if the worker fails to handle the message.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyPush([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase scope, [MarshalAs(UnmanagedType.Interface)] nsIPrincipal principal, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase messageId);
		
		/// <summary>
        /// Same as `notifyPush`, except the subject of the observer notification
        /// receives an `nsIPushMessage` instance containing the |data|. Service
        /// workers can access the |data| via the `PushMessageData` WebIDL interface.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyPushWithData([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase scope, [MarshalAs(UnmanagedType.Interface)] nsIPrincipal principal, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase messageId, uint dataLen, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=3)] byte[] data);
		
		/// <summary>
        /// Fires a `push-subscription-change` observer notification, and sends a
        /// `pushsubscriptionchange` event to the service worker registered for the
        /// |scope|.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifySubscriptionChange([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase scope, [MarshalAs(UnmanagedType.Interface)] nsIPrincipal principal);
		
		/// <summary>
        /// Fires a `push-subscription-modified` observer notification. Chrome code
        /// can listen for this notification to see when a subscription is added,
        /// updated, removed, or expired for any |scope|.
        ///
        /// This is useful for Dev Tools and debugging add-ons that passively observe
        /// when subscriptions are created or dropped. Other callers should listen for
        /// `push-subscription-change` and resubscribe instead.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifySubscriptionModified([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase scope, [MarshalAs(UnmanagedType.Interface)] nsIPrincipal principal);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyError([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase scope, [MarshalAs(UnmanagedType.Interface)] nsIPrincipal principal, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase message, uint flags);
	}
	
	/// <summary>
    /// Provides methods for retrieving push message data in different formats.
    /// This interface resembles the `PushMessageData` WebIDL interface.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("dfc4f151-cead-40df-8eb7-7a7a67c54b16")]
	public interface nsIPushData
	{
		
		/// <summary>
        ///Extracts the data as a UTF-8 text string. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Text([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase retval);
		
		/// <summary>
        ///Extracts the data as a JSON value. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal Json(System.IntPtr jsContext);
		
		/// <summary>
        ///Extracts the raw binary data. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Binary(ref uint dataLen, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] ref byte[] data);
	}
	
	/// <summary>
    /// The subject of a `push-message` observer notification. |data| may be |null|
    /// for messages without data.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("b9d063ca-0e3f-4fee-be4b-ea9103263433")]
	public interface nsIPushMessage
	{
		
		/// <summary>
        /// The subject of a `push-message` observer notification. |data| may be |null|
        /// for messages without data.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPrincipal GetPrincipalAttribute();
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPushData GetDataAttribute();
	}
}
