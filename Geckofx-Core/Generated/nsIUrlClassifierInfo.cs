// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIUrlClassifierInfo.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// nsIUrlClassifierPositiveCacheEntry Represents a positive cache entry.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("b3c27f8c-7db8-4f3f-97a5-5a94d781e565")]
	public interface nsIUrlClassifierPositiveCacheEntry
	{
		
		/// <summary>
        /// Fullhash for the positive cache entry.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetFullhashAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aFullhash);
		
		/// <summary>
        /// Positive cache expiry.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		long GetExpiryAttribute();
	}
	
	/// <summary>
    /// nsIUrlClassifierCacheEntry contains cache information for
    /// a given prefix.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("d6297907-8236-4126-adaf-c3aa239a0d40")]
	public interface nsIUrlClassifierCacheEntry
	{
		
		/// <summary>
        /// Prefix for this cache entry.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetPrefixAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aPrefix);
		
		/// <summary>
        /// Negative cache expiry.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		long GetExpiryAttribute();
		
		/// <summary>
        /// An array of nsIUrlClassifierPositiveCacheEntry, each item represents
        /// a positive cache entry with its fullhash and expiry.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIArray GetMatchesAttribute();
	}
	
	/// <summary>
    /// Cache information for a given table.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("69384f24-d9c5-4462-b24e-351c69e3b46a")]
	public interface nsIUrlClassifierCacheInfo
	{
		
		/// <summary>
        /// Table name.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetTableAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aTable);
		
		/// <summary>
        /// An array of nsIUrlClassifierCacheEntry.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIArray GetEntriesAttribute();
	}
	
	/// <summary>nsIUrlClassifierGetCacheCallback </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("26e12ea4-14ff-4c77-858f-6745998b7659")]
	public interface nsIUrlClassifierGetCacheCallback
	{
		
		/// <summary>Member OnGetCacheComplete </summary>
		/// <param name='info'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnGetCacheComplete([MarshalAs(UnmanagedType.Interface)] nsIUrlClassifierCacheInfo info);
	}
	
	/// <summary>
    /// Interface to query url-classifier information.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("411bbff4-1b88-4687-aa36-e2bbdd93f6e8")]
	public interface nsIUrlClassifierInfo
	{
		
		/// <summary>
        /// An asynchronous call to return cache information for the table.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetCacheInfo([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase table, [MarshalAs(UnmanagedType.Interface)] nsIUrlClassifierGetCacheCallback callback);
	}
}
