// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIRequestContext.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// Requests capable of tail-blocking must implement this
    /// interfaces (typically channels).
    /// If the request is tail-blocked, it will be held in its request
    /// context queue until unblocked.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("7EB361D4-37A5-42C9-AFAE-F6C88FE7C394")]
	public interface nsIRequestTailUnblockCallback
	{
		
		/// <summary>
        /// Called when the requests is unblocked and proceed.
        /// @param result
        /// NS_OK - the request is OK to go, unblocking is not
        /// caused by cancelation of the request.
        /// any error - the request must behave as it were canceled
        /// with the result as status.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnTailUnblock(int aResult);
	}
	
	/// <summary>
    /// The nsIRequestContext is used to maintain state about connections
    /// that are in some way associated with each other (often by being part
    /// of the same load group) and how they interact with blocking items like
    /// HEAD css/js loads.
    ///
    /// This used to be known as nsILoadGroupConnectionInfo and nsISchedulingContext.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("658e3e6e-8633-4b1a-8d66-fa9f72293e63")]
	public interface nsIRequestContext
	{
		
		/// <summary>
        /// A unique identifier for this request context
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ulong GetIDAttribute();
		
		/// <summary>
        /// Called by the associated document when its load starts.  This resets
        /// context's internal states.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BeginLoad();
		
		/// <summary>
        /// Called when the associated document notified the DOMContentLoaded event.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DOMContentLoaded();
		
		/// <summary>
        /// Number of active blocking transactions associated with this context
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetBlockingTransactionCountAttribute();
		
		/// <summary>
        /// Increase the number of active blocking transactions associated
        /// with this context by one.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddBlockingTransaction();
		
		/// <summary>
        /// Decrease the number of active blocking transactions associated
        /// with this context by one. The return value is the number of remaining
        /// blockers.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint RemoveBlockingTransaction();
		
		/// <summary>
        /// This gives out a weak pointer to the push cache.
        /// The nsIRequestContext implementation owns the cache
        /// and will destroy it when overwritten or when the context
        /// ends.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.IntPtr GetSpdyPushCacheAttribute();
		
		/// <summary>
        /// This gives out a weak pointer to the push cache.
        /// The nsIRequestContext implementation owns the cache
        /// and will destroy it when overwritten or when the context
        /// ends.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetSpdyPushCacheAttribute(System.IntPtr aSpdyPushCache);
		
		/// <summary>
        /// This holds a cached value of the user agent override.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetUserAgentOverrideAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aUserAgentOverride);
		
		/// <summary>
        /// This holds a cached value of the user agent override.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetUserAgentOverrideAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aUserAgentOverride);
		
		/// <summary>
        /// Increases/decrease the number of non-tailed requests in this context.
        /// If the count drops to zero, all tail-blocked callbacks are notified
        /// shortly after that to be unblocked.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddNonTailRequest();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveNonTailRequest();
		
		/// <summary>
        /// If the request context is in tail-blocked state, the callback
        /// is queued and result is true.  The callback will be notified
        /// about tail-unblocking or when the request context is canceled.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsContextTailBlocked([MarshalAs(UnmanagedType.Interface)] nsIRequestTailUnblockCallback callback);
		
		/// <summary>
        /// Called when the request is sitting in the tail queue but has been
        /// canceled before untailing.  This just removes the request from the
        /// queue so that it is not notified on untail and not referenced.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CancelTailedRequest([MarshalAs(UnmanagedType.Interface)] nsIRequestTailUnblockCallback request);
		
		/// <summary>
        /// This notifies all queued tail-blocked requests, they will be notified
        /// aResult and released afterwards.  Called by the load group when
        /// it's canceled.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CancelTailPendingRequests(int aResult);
	}
	
	/// <summary>
    /// The nsIRequestContextService is how anyone gets access to a request
    /// context when they haven't been explicitly given a strong reference to an
    /// existing one. It is responsible for creating and handing out strong
    /// references to nsIRequestContexts, but only keeps weak references itself.
    /// The shared request context will go away once no one else is keeping a
    /// reference to it. If you ask for a request context that has no one else
    /// holding a reference to it, you'll get a brand new request context. Anyone
    /// who asks for the same request context while you're holding a reference
    /// will get a reference to the same request context you have.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("7fcbf4da-d828-4acc-b144-e5435198f727")]
	public interface nsIRequestContextService
	{
		
		/// <summary>
        /// Get an existing request context from its ID
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIRequestContext GetRequestContext(ulong id);
		
		/// <summary>
        /// Shorthand to get request context from a load group
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIRequestContext GetRequestContextFromLoadGroup([MarshalAs(UnmanagedType.Interface)] nsILoadGroup lg);
		
		/// <summary>
        /// Create a new request context
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIRequestContext NewRequestContext();
		
		/// <summary>
        /// Remove an existing request context from its ID
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveRequestContext(ulong id);
	}
}
