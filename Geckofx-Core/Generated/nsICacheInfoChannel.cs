// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsICacheInfoChannel.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("72c34415-c6eb-48af-851f-772fa9ee5972")]
	public interface nsICacheInfoChannel
	{
		
		/// <summary>
        /// Get the number of times the cache entry has been opened. This attribute is
        /// equivalent to nsICachingChannel.cacheToken.fetchCount.
        ///
        /// @throws NS_ERROR_NOT_AVAILABLE if the cache entry or the alternate data
        /// cache entry cannot be read.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetCacheTokenFetchCountAttribute();
		
		/// <summary>
        /// Get expiration time from cache token. This attribute is equivalent to
        /// nsICachingChannel.cacheToken.expirationTime.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetCacheTokenExpirationTimeAttribute();
		
		/// <summary>
        /// Set/get charset of cache entry. Accessing this attribute is equivalent to
        /// calling nsICachingChannel.cacheToken.getMetaDataElement("charset") and
        /// nsICachingChannel.cacheToken.setMetaDataElement("charset").
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetCacheTokenCachedCharsetAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aCacheTokenCachedCharset);
		
		/// <summary>
        /// Set/get charset of cache entry. Accessing this attribute is equivalent to
        /// calling nsICachingChannel.cacheToken.getMetaDataElement("charset") and
        /// nsICachingChannel.cacheToken.setMetaDataElement("charset").
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetCacheTokenCachedCharsetAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aCacheTokenCachedCharset);
		
		/// <summary>
        /// TRUE if this channel's data is being loaded from the cache.  This value
        /// is undefined before the channel fires its OnStartRequest notification
        /// and after the channel fires its OnStopRequest notification.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsFromCache();
		
		/// <summary>
        /// The unique ID of the corresponding nsICacheEntry from which the response is
        /// retrieved. By comparing the returned value, we can judge whether the data
        /// of two distinct nsICacheInfoChannels is from the same nsICacheEntry. This
        /// scenario could be useful when verifying whether the alternative data from
        /// one nsICacheInfochannel matches the main data from another one.
        ///
        /// Note: NS_ERROR_NOT_AVAILABLE is thrown when a nsICacheInfoChannel has no
        /// valid corresponding nsICacheEntry.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ulong GetCacheEntryId();
		
		/// <summary>
        /// Set/get the cache key... uniquely identifies the data in the cache
        /// for this channel.  Holding a reference to this key does NOT prevent
        /// the cached data from being removed.
        ///
        /// A cache key retrieved from a particular instance of nsICacheInfoChannel
        /// could be set on another instance of nsICacheInfoChannel provided the
        /// underlying implementations are compatible and provided the new
        /// channel instance was created with the same URI.  The implementation of
        /// nsICacheInfoChannel would be expected to use the cache entry identified
        /// by the cache token.  Depending on the value of nsIRequest::loadFlags,
        /// the cache entry may be validated, overwritten, or simply read.
        ///
        /// The cache key may be NULL indicating that the URI of the channel is
        /// sufficient to locate the same cache entry.  Setting a NULL cache key
        /// is likewise valid.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISupports GetCacheKeyAttribute();
		
		/// <summary>
        /// Set/get the cache key... uniquely identifies the data in the cache
        /// for this channel.  Holding a reference to this key does NOT prevent
        /// the cached data from being removed.
        ///
        /// A cache key retrieved from a particular instance of nsICacheInfoChannel
        /// could be set on another instance of nsICacheInfoChannel provided the
        /// underlying implementations are compatible and provided the new
        /// channel instance was created with the same URI.  The implementation of
        /// nsICacheInfoChannel would be expected to use the cache entry identified
        /// by the cache token.  Depending on the value of nsIRequest::loadFlags,
        /// the cache entry may be validated, overwritten, or simply read.
        ///
        /// The cache key may be NULL indicating that the URI of the channel is
        /// sufficient to locate the same cache entry.  Setting a NULL cache key
        /// is likewise valid.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetCacheKeyAttribute([MarshalAs(UnmanagedType.Interface)] nsISupports aCacheKey);
		
		/// <summary>
        /// Tells the channel to behave as if the LOAD_FROM_CACHE flag has been set,
        /// but without affecting the loads for the entire loadGroup in case of this
        /// channel being the default load group's channel.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetAllowStaleCacheContentAttribute();
		
		/// <summary>
        /// Tells the channel to behave as if the LOAD_FROM_CACHE flag has been set,
        /// but without affecting the loads for the entire loadGroup in case of this
        /// channel being the default load group's channel.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetAllowStaleCacheContentAttribute([MarshalAs(UnmanagedType.U1)] bool aAllowStaleCacheContent);
		
		/// <summary>
        /// Calling this method instructs the channel to serve the alternative data
        /// if that was previously saved in the cache, otherwise it will serve the
        /// real data.
        /// Must be called before AsyncOpen.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PreferAlternativeDataType([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase type);
		
		/// <summary>
        /// Get the preferred alternative data type set by preferAlternativeDataType().
        /// This attribute stands for the desired data type instead of the type of the
        /// information retrieved from the network stack.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetPreferredAlternativeDataTypeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aPreferredAlternativeDataType);
		
		/// <summary>
        /// Holds the type of the alternative data representation that the channel
        /// is returning.
        /// Is empty string if no alternative data representation was requested, or
        /// if the requested representation wasn't found in the cache.
        /// Can only be called during or after OnStartRequest.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetAlternativeDataTypeAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aAlternativeDataType);
		
		/// <summary>
        /// Opens and returns an output stream that a consumer may use to save an
        /// alternate representation of the data.
        /// Must be called after the OnStopRequest that delivered the real data.
        /// The consumer may choose to replace the saved alt representation.
        /// Opening the output stream will fail if there are any open input streams
        /// reading the already saved alt representation.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIOutputStream OpenAlternativeOutputStream([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase type);
	}
}
