// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIThreadManager.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("039a227d-0cb7-44a5-a8f9-dbb7071979f2")]
	public interface nsINestedEventLoopCondition
	{
		
		/// <summary>
        /// Returns true if the current nested event loop should stop spinning.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsDone();
	}
	
	/// <summary>
    /// An interface for creating and locating nsIThread instances.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("1be89eca-e2f7-453b-8d38-c11ba247f6f3")]
	public interface nsIThreadManager
	{
		
		/// <summary>
        /// Create a new thread (a global, user PRThread).
        ///
        /// @param creationFlags
        /// Reserved for future use.  Pass 0.
        /// @param stackSize
        /// Number of bytes to reserve for the thread's stack.
        ///
        /// @returns
        /// The newly created nsIThread object.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIThread NewThread(uint creationFlags, uint stackSize);
		
		/// <summary>
        /// Create a new thread (a global, user PRThread) with the specified name.
        ///
        /// @param name
        /// The name of the thread. Passing an empty name is equivalent to
        /// calling newThread(0, stackSize), i.e. the thread will not be named.
        /// @param stackSize
        /// Number of bytes to reserve for the thread's stack.
        ///
        /// @returns
        /// The newly created nsIThread object.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIThread NewNamedThread([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase name, uint stackSize);
		
		/// <summary>
        /// Get the nsIThread object (if any) corresponding to the given PRThread.
        /// This method returns null if there is no corresponding nsIThread.
        ///
        /// @param prthread
        /// The PRThread of the nsIThread being requested.
        ///
        /// @returns
        /// The nsIThread object corresponding to the given PRThread or null if no
        /// such nsIThread exists.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIThread GetThreadFromPRThread(System.IntPtr prthread);
		
		/// <summary>
        /// Get the main thread.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIThread GetMainThreadAttribute();
		
		/// <summary>
        /// Get the current thread.  If the calling thread does not already have a
        /// nsIThread associated with it, then a new nsIThread will be created and
        /// associated with the current PRThread.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIThread GetCurrentThreadAttribute();
		
		/// <summary>
        /// This queues a runnable to the main thread. It's a shortcut for JS callers
        /// to be used instead of
        /// .mainThread.dispatch(runnable, Ci.nsIEventTarget.DISPATCH_NORMAL);
        /// or
        /// .currentThread.dispatch(runnable, Ci.nsIEventTarget.DISPATCH_NORMAL);
        /// C++ callers should instead use NS_DispatchToMainThread.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DispatchToMainThread([MarshalAs(UnmanagedType.Interface)] nsIRunnable @event, uint priority);
		
		/// <summary>
        /// This queues a runnable to the main thread's idle queue.
        ///
        /// @param event
        /// The event to dispatch.
        /// @param timeout
        /// The time in milliseconds until this event should be moved from the idle
        /// queue to the regular queue if it hasn't been executed by then.  If not
        /// passed or a zero value is specified, the event will never be moved to
        /// the regular queue.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void IdleDispatchToMainThread([MarshalAs(UnmanagedType.Interface)] nsIRunnable @event, uint timeout);
		
		/// <summary>
        /// Enter a nested event loop on the current thread, waiting on, and
        /// processing events until condition.isDone() returns true.
        ///
        /// If condition.isDone() throws, this function will throw as well.
        ///
        /// C++ code should not use this function, instead preferring
        /// mozilla::SpinEventLoopUntil.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SpinEventLoopUntil([MarshalAs(UnmanagedType.Interface)] nsINestedEventLoopCondition condition);
		
		/// <summary>
        /// Similar to the previous method, but the spinning of the event loop
        /// terminates when the shutting down starts.
        ///
        /// C++ code should not use this function, instead preferring
        /// mozilla::SpinEventLoopUntil.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SpinEventLoopUntilOrShutdown([MarshalAs(UnmanagedType.Interface)] nsINestedEventLoopCondition condition);
		
		/// <summary>
        /// Spin the current thread's event loop until there are no more pending
        /// events.  This could be done with spinEventLoopUntil, but that would
        /// require access to the current thread from JavaScript, which we are
        /// moving away from.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SpinEventLoopUntilEmpty();
		
		/// <summary>
        /// Return the SchedulerEventTarget for the SystemGroup.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIEventTarget GetSystemGroupEventTargetAttribute();
	}
	
	/// <summary>nsIThreadManagerConsts </summary>
	public class nsIThreadManagerConsts
	{
		
		// <summary>
        // Default number of bytes reserved for a thread's stack, if no stack size
        // is specified in newThread(). 0 means use platform default.
        // </summary>
		public const ulong DEFAULT_STACK_SIZE = 0;
	}
}
