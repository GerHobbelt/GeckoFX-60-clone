// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIUrlClassifierDBService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// Interface for JS function callbacks
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("4ca27b6b-a674-4b3d-ab30-d21e2da2dffb")]
	public interface nsIUrlClassifierCallback
	{
		
		/// <summary>
        /// Interface for JS function callbacks
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HandleEvent([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase value);
	}
	
	/// <summary>
    /// The nsIUrlClassifierUpdateObserver interface is implemented by
    /// clients streaming updates to the url-classifier (usually
    /// nsUrlClassifierStreamUpdater.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("9fa11561-5816-4e1b-bcc9-b629ca05cce6")]
	public interface nsIUrlClassifierUpdateObserver
	{
		
		/// <summary>
        /// The update requested a new URL whose contents should be downloaded
        /// and sent to the classifier as a new stream.
        ///
        /// @param url The url that was requested.
        /// @param table The table name that this URL's contents will be associated
        /// with.  This should be passed back to beginStream().
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UpdateUrlRequested([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase url, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase table);
		
		/// <summary>
        /// A stream update has completed.
        ///
        /// @param status The state of the update process.
        /// @param delay The amount of time the updater should wait to fetch the
        /// next URL in ms.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StreamFinished(int status, uint delay);
		
		/// <summary>
        ///The update has encountered an error and should be cancelled </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UpdateError(int error);
		
		/// <summary>
        /// The update has completed successfully.
        ///
        /// @param requestedTimeout The number of seconds that the caller should
        /// wait before trying to update again.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UpdateSuccess(uint requestedTimeout);
	}
	
	/// <summary>
    /// This is a proxy class that is instantiated and called from the JS thread.
    /// It provides async methods for querying and updating the database.  As the
    /// methods complete, they call the callback function.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("7a258022-6765-11e5-b379-b37b1f2354be")]
	public interface nsIUrlClassifierDBService
	{
		
		/// <summary>
        /// Looks up a URI in the specified tables.
        ///
        /// @param principal: The principal containing the URI to search.
        /// @param c: The callback will be called with a comma-separated list
        /// of tables to which the key belongs.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Lookup([MarshalAs(UnmanagedType.Interface)] nsIPrincipal principal, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase tables, [MarshalAs(UnmanagedType.Interface)] nsIUrlClassifierCallback c);
		
		/// <summary>
        /// Lists the tables along with their meta info in the following format:
        ///
        /// tablename;[metadata]\n
        /// tablename2;[metadata]\n
        ///
        /// For v2 tables, the metadata is the chunks info such as
        ///
        /// goog-phish-shavar;a:10,14,30-40s:56,67
        /// goog-unwanted-shavar;a:1-3,5
        ///
        /// For v4 tables, base64 encoded state is currently the only info in the
        /// metadata (can be extended whenever necessary). For exmaple,
        ///
        /// goog-phish-proto;Cg0IARAGGAEiAzAwMTABEKqTARoCGAjT1gDD:oCGAjT1gDD\n
        /// goog-malware-proto;Cg0IAhAGGAEiAzAwMTABENCQARoCGAjx5Yty:BENCQARoCGAj\n
        ///
        /// Note that the metadata is colon-separated.
        ///
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetTables([MarshalAs(UnmanagedType.Interface)] nsIUrlClassifierCallback c);
		
		/// <summary>
        /// Set the nsIUrlClassifierCompleter object for a given table.  This
        /// object will be used to request complete versions of partial
        /// hashes.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetHashCompleter([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase tableName, [MarshalAs(UnmanagedType.Interface)] nsIUrlClassifierHashCompleter completer);
		
		/// <summary>
        /// Forget the results that were used in the last DB update.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ClearLastResults();
		
		/// <summary>
        /// Begin an update process.  Will throw NS_ERROR_NOT_AVAILABLE if there
        /// is already an update in progress.
        ///
        /// @param updater The update observer tied to this update.
        /// @param tables A comma-separated list of tables included in this update.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BeginUpdate([MarshalAs(UnmanagedType.Interface)] nsIUrlClassifierUpdateObserver updater, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase tables);
		
		/// <summary>
        /// Begin a stream update.  This should be called once per url being
        /// fetched.
        ///
        /// @param table The table the contents of this stream will be associated
        /// with, or empty for the initial stream.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BeginStream([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase table);
		
		/// <summary>
        /// Update the table incrementally.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UpdateStream([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase updateChunk);
		
		/// <summary>
        /// Finish an individual stream update.  Must be called for every
        /// beginStream() call, before the next beginStream() or finishUpdate().
        ///
        /// The update observer's streamFinished will be called once the
        /// stream has been processed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FinishStream();
		
		/// <summary>
        /// Finish an incremental update.  This will attempt to commit any
        /// pending changes and resets the update interface.
        ///
        /// The update observer's updateSucceeded or updateError methods
        /// will be called when the update has been processed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FinishUpdate();
		
		/// <summary>
        /// Cancel an incremental update.  This rolls back any pending changes.
        /// and resets the update interface.
        ///
        /// The update observer's updateError method will be called when the
        /// update has been rolled back.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CancelUpdate();
		
		/// <summary>
        /// Reset the url-classifier database.  This call will delete the existing
        /// database, emptying all tables.  Mostly intended for use in unit tests.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ResetDatabase();
		
		/// <summary>
        /// Reload he url-classifier database. This will empty all cache for
        /// completions from gethash, and reload it from database. Mostly intended
        /// for use in tests.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ReloadDatabase();
		
		/// <summary>
        /// Empty all the caches.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ClearCache();
	}
	
	/// <summary>
    /// This is an internal helper interface for communication between the
    /// main thread and the dbservice worker thread.  It is called for each
    /// lookup to provide a set of possible results, which the main thread
    /// may need to expand using an nsIUrlClassifierCompleter.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("b903dc8f-dff1-42fe-894b-36e7a59bb801")]
	public interface nsIUrlClassifierLookupCallback
	{
		
		/// <summary>
        /// The lookup process is complete.
        ///
        /// @param results
        /// If this parameter is null, there were no results found.
        /// If not, it contains an array of nsUrlClassifierEntry objects
        /// with possible matches.  The callee is responsible for freeing
        /// this array.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void LookupComplete(System.IntPtr results);
	}
	
	/// <summary>
    /// This is an internal helper interface which is called after each
    /// classify completes to provide and handle a set of possible results,
    /// which the main thread may need to expand using an nsIURIClassifierCallback.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("091adf98-28a5-473d-8dec-5b34b4e62496")]
	public interface nsIUrlClassifierClassifyCallback
	{
		
		/// <summary>
        /// The function is called each time the URL matches a Safe Browsing list
        /// The function could be called multiple times if URL matches multiple lists
        ///
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HandleResult([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aList, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aPrefix);
	}
}
