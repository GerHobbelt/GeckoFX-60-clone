// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIWindowlessBrowser.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// This interface represents a nsIWebBrowser instance with no associated OS
    /// window. Its main function is to manage the lifetimes of those windows.
    /// A strong reference to this object must be held until the window is
    /// ready to be destroyed.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("abb46f48-abfc-41bf-aa9a-7feccefcf977")]
	public interface nsIWindowlessBrowser : nsIWebNavigation
	{
		
		/// <summary>
        /// Indicates if the object can go back.  If true this indicates that
        /// there is back session history available for navigation.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool GetCanGoBackAttribute();
		
		/// <summary>
        /// Indicates if the object can go forward.  If true this indicates that
        /// there is forward session history available for navigation
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool GetCanGoForwardAttribute();
		
		/// <summary>
        /// Tells the object to navigate to the previous session history item.  When a
        /// page is loaded from session history, all content is loaded from the cache
        /// (if available) and page state (such as form values and scroll position) is
        /// restored.
        ///
        /// @throw NS_ERROR_UNEXPECTED
        /// Indicates that the call was unexpected at this time, which implies
        /// that canGoBack is false.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GoBack();
		
		/// <summary>
        /// Tells the object to navigate to the next session history item.  When a
        /// page is loaded from session history, all content is loaded from the cache
        /// (if available) and page state (such as form values and scroll position) is
        /// restored.
        ///
        /// @throw NS_ERROR_UNEXPECTED
        /// Indicates that the call was unexpected at this time, which implies
        /// that canGoForward is false.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GoForward();
		
		/// <summary>
        /// Tells the object to navigate to the session history item at a given index.
        ///
        /// @throw NS_ERROR_UNEXPECTED
        /// Indicates that the call was unexpected at this time, which implies
        /// that session history entry at the given index does not exist.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GotoIndex(int index);
		
		/// <summary>
        /// Loads a given URI.  This will give priority to loading the requested URI
        /// in the object implementing	this interface.  If it can't be loaded here
        /// however, the URI dispatcher will go through its normal process of content
        /// loading.
        ///
        /// @param aURI
        /// The URI string to load.  For HTTP and FTP URLs and possibly others,
        /// characters above U+007F will be converted to UTF-8 and then URL-
        /// escaped per the rules of RFC 2396.
        /// @param aLoadFlags
        /// Flags modifying load behaviour.  This parameter is a bitwise
        /// combination of the load flags defined above.  (Undefined bits are
        /// reserved for future use.)  Generally you will pass LOAD_FLAGS_NONE
        /// for this parameter.
        /// @param aReferrer
        /// The referring URI.  If this argument is null, then the referring
        /// URI will be inferred internally.
        /// @param aPostData
        /// If the URI corresponds to a HTTP request, then this stream is
        /// appended directly to the HTTP request headers.  It may be prefixed
        /// with additional HTTP headers.  This stream must contain a "\r\n"
        /// sequence separating any HTTP headers from the HTTP request body.
        /// This parameter is optional and may be null.
        /// @param aHeaders
        /// If the URI corresponds to a HTTP request, then any HTTP headers
        /// contained in this stream are set on the HTTP request.  The HTTP
        /// header stream is formatted as:
        /// ( HEADER "\r\n" )*
        /// This parameter is optional and may be null.
        /// @param aTriggeringPrincipal
        /// The principal that initiated the load of aURI. If omitted docShell
        /// tries to create a codeBasePrincipal from aReferrer if not null. If
        /// aReferrer is also null docShell peforms a load using the
        /// SystemPrincipal as the triggeringPrincipal.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void LoadURI([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.WStringMarshaler")] string aURI, uint aLoadFlags, [MarshalAs(UnmanagedType.Interface)] nsIURI aReferrer, [MarshalAs(UnmanagedType.Interface)] nsIInputStream aPostData, [MarshalAs(UnmanagedType.Interface)] nsIInputStream aHeaders, [MarshalAs(UnmanagedType.Interface)] nsIPrincipal aTriggeringPrincipal);
		
		/// <summary>
        /// Loads a given URI.  This will give priority to loading the requested URI
        /// in the object implementing this interface.  If it can't be loaded here
        /// however, the URI dispatcher will go through its normal process of content
        /// loading.
        ///
        /// Behaves like loadURI, but allows passing of additional parameters.
        ///
        /// @param aURI
        /// The URI string to load.  For HTTP and FTP URLs and possibly others,
        /// characters above U+007F will be converted to UTF-8 and then URL-
        /// escaped per the rules of RFC 2396.
        /// @param aLoadFlags
        /// Flags modifying load behaviour.  This parameter is a bitwise
        /// combination of the load flags defined above.  (Undefined bits are
        /// reserved for future use.)  Generally you will pass LOAD_FLAGS_NONE
        /// for this parameter.
        /// @param aReferrer
        /// The referring URI.  If this argument is null, then the referring
        /// URI will be inferred internally.
        /// @param aReferrerPolicy
        /// One of the REFERRER_POLICY_* constants from nsIHttpChannel.
        /// Normal case is REFERRER_POLICY_NO_REFERRER_WHEN_DOWNGRADE.
        /// @param aPostData
        /// If the URI corresponds to a HTTP request, then this stream is
        /// appended directly to the HTTP request headers.  It may be prefixed
        /// with additional HTTP headers.  This stream must contain a "\r\n"
        /// sequence separating any HTTP headers from the HTTP request body.
        /// This parameter is optional and may be null.
        /// @param aHeaders
        /// If the URI corresponds to a HTTP request, then any HTTP headers
        /// contained in this stream are set on the HTTP request.  The HTTP
        /// header stream is formatted as:
        /// ( HEADER "\r\n" )*
        /// This parameter is optional and may be null.
        /// @param aBaseURI
        /// Set to indicate a base URI to be associated with the load. Note
        /// that at present this argument is only used with view-source aURIs
        /// and cannot be used to resolve aURI.
        /// This parameter is optional and may be null.
        /// @param aTriggeringPrincipal
        /// The principal that initiated the load of aURI. If omitted docShell
        /// tries to create a codeBasePrincipal from aReferrer if not null. If
        /// aReferrer is also null docShell peforms a load using the
        /// SystemPrincipal as the triggeringPrincipal.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void LoadURIWithOptions([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.WStringMarshaler")] string aURI, uint aLoadFlags, [MarshalAs(UnmanagedType.Interface)] nsIURI aReferrer, uint aReferrerPolicy, [MarshalAs(UnmanagedType.Interface)] nsIInputStream aPostData, [MarshalAs(UnmanagedType.Interface)] nsIInputStream aHeaders, [MarshalAs(UnmanagedType.Interface)] nsIURI aBaseURI, [MarshalAs(UnmanagedType.Interface)] nsIPrincipal aTriggeringPrincipal);
		
		/// <summary>
        /// Tells the Object to reload the current page.  There may be cases where the
        /// user will be asked to confirm the reload (for example, when it is
        /// determined that the request is non-idempotent).
        ///
        /// @param aReloadFlags
        /// Flags modifying load behaviour.  This parameter is a bitwise
        /// combination of the Load Flags defined above.  (Undefined bits are
        /// reserved for future use.)  Generally you will pass LOAD_FLAGS_NONE
        /// for this parameter.
        ///
        /// @throw NS_BINDING_ABORTED
        /// Indicating that the user canceled the reload.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void Reload(uint aReloadFlags);
		
		/// <summary>
        /// Stops a load of a URI.
        ///
        /// @param aStopFlags
        /// This parameter is one of the stop flags defined above.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void Stop(uint aStopFlags);
		
		/// <summary>
        /// Retrieves the current DOM document for the frame, or lazily creates a
        /// blank document if there is none.  This attribute never returns null except
        /// for unexpected error situations.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIDOMDocument GetDocumentAttribute();
		
		/// <summary>
        /// The currently loaded URI or null.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIURI GetCurrentURIAttribute();
		
		/// <summary>
        /// The referring URI for the currently loaded URI or null.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsIURI GetReferringURIAttribute();
		
		/// <summary>
        /// The session history object used by this web navigation instance.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new nsISHistory GetSessionHistoryAttribute();
		
		/// <summary>
        /// The session history object used by this web navigation instance.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetSessionHistoryAttribute([MarshalAs(UnmanagedType.Interface)] nsISHistory aSessionHistory);
		
		/// <summary>
        /// Set an OriginAttributes dictionary in the docShell. This can be done only
        /// before loading any content.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void SetOriginAttributesBeforeLoading(ref Gecko.JsVal OriginAttributes);
		
		/// <summary>
        /// "Closes" the windowless browser and destroys its associated nsIWebBrowser
        /// and docshell.
        ///
        /// This method *must* be called for every windowless browser before its last
        /// reference is released.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Close();
	}
}
