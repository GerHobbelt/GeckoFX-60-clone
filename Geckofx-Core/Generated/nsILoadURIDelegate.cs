// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsILoadURIDelegate.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// The nsILoadURIDelegate interface.
    /// Used for delegating URI loads to GeckoView's application, e.g., Custom Tabs
    /// or Progressive Web Apps.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("78e42d37-a34c-4d96-b901-25385669aba4")]
	public interface nsILoadURIDelegate
	{
		
		/// <summary>
        /// Delegates the URI load.
        ///
        /// @param aURI The URI to load.
        /// @param aWhere See possible values described in nsIBrowserDOMWindow.
        /// @param aFlags Flags which control the behavior of the load.
        /// @param aTriggeringPrincipal The principal that triggered the load of aURI.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool LoadURI([MarshalAs(UnmanagedType.Interface)] nsIURI aURI, short aWhere, int aFlags, [MarshalAs(UnmanagedType.Interface)] nsIPrincipal aTriggeringPrincipal);
	}
}
