// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIScreen.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///-*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
    ///
    /// This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("826e80c8-d70f-42e2-8aa9-82c05f2a370a")]
	public interface nsIScreen
	{
		
		/// <summary>
        /// These report screen dimensions in (screen-specific) device pixels
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetRect(ref int left, ref int top, ref int width, ref int height);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetAvailRect(ref int left, ref int top, ref int width, ref int height);
		
		/// <summary>
        /// And these report in desktop pixels
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetRectDisplayPix(ref int left, ref int top, ref int width, ref int height);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetAvailRectDisplayPix(ref int left, ref int top, ref int width, ref int height);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetPixelDepthAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetColorDepthAttribute();
		
		/// <summary>
        /// The number of device pixels per desktop pixel for this screen (for
        /// hidpi configurations where there may be multiple device pixels per
        /// desktop px and/or per CSS px).
        ///
        /// This seems poorly named (something like devicePixelsPerDesktopPixel
        /// would be more accurate/explicit), but given that it is exposed to
        /// front-end code and may also be used by add-ons, it's probably not
        /// worth the disruption of changing it.
        ///
        /// Returns 1.0 if HiDPI mode is disabled or unsupported, or if the
        /// host OS uses device pixels as its desktop pixel units (e.g. Windows 7 or
        /// GTK/X11). Per-monitor DPI is available in Windows 8.1+, GTK/Wayland or
        /// macOS.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetContentsScaleFactorAttribute();
		
		/// <summary>
        /// The default number of device pixels per unscaled CSS pixel for this
        /// screen. This is probably what contentsScaleFactor originally meant
        /// to be, prior to confusion between CSS pixels and desktop pixel units.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetDefaultCSSScaleFactorAttribute();
		
		/// <summary>
        /// The DPI of the screen.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		float GetDpiAttribute();
	}
}
