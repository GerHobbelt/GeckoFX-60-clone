// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsILayoutHistoryState.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// interface for container for information saved in session history when
    /// the document is not
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("aef27cb3-4df9-4eeb-b0b0-ac56cf861d04")]
	public interface nsILayoutHistoryState
	{
		
		/// <summary>
        /// Whether this LayoutHistoryState contains any PresStates.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetHasStatesAttribute();
		
		/// <summary>
        /// Get the keys of all PresStates held by this LayoutHistoryState.
        /// Note: Check hasStates first.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetKeys(ref uint aCount, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] ref string[] aKeys);
		
		/// <summary>
        /// Attempts to get the data of the PresState corresponding to
        /// the passed key. Throws if no data could be found.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetPresState([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aKey, ref float aScrollX, ref float aScrollY, [MarshalAs(UnmanagedType.U1)] ref bool aAllowScrollOriginDowngrade, ref float aRes, [MarshalAs(UnmanagedType.U1)] ref bool aScaleToRes);
		
		/// <summary>
        /// Constructs a new nsPresState object based on the supplied data
        /// and adds it to the LayoutHistoryState.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddNewPresState([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aKey, float aScrollX, float aScrollY, [MarshalAs(UnmanagedType.U1)] bool aAllowScrollOriginDowngrade, float aRes, [MarshalAs(UnmanagedType.U1)] bool aScaleToRes);
		
		/// <summary>
        /// Set |aState| as the state object for |aKey|.
        /// This _transfers_ownership_ of |aState| to the LayoutHistoryState.
        /// It will be freed when RemoveState() is called or when the
        /// LayoutHistoryState is destroyed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddState(nsISupports aKey, nsISupports aState);
		
		/// <summary>
        /// Look up the state object for |aKey|.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
        nsISupports GetState(nsISupports aKey);
		
		/// <summary>
        /// Remove the state object for |aKey|.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveState(nsISupports aKey);
		
		/// <summary>
        /// Check whether this history has any states in it
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool HasStates();
		
		/// <summary>
        /// Sets whether this history can contain only scroll position history
        /// or all possible history
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetScrollPositionOnly(nsISupports aFlag);
		
		/// <summary>
        /// Resets nsPresState::GetScrollState of all nsPresState objects to 0,0.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ResetScrollState();
	}
}
