// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIHTMLAbsPosEditor.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("91375f52-20e6-4757-9835-eb04fabe5498")]
	public interface nsIHTMLAbsPosEditor
	{
		
		/// <summary>
        /// this contains the absolutely positioned element currently edited
        /// or null
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMElement GetPositionedElementAttribute();
		
		/// <summary>
        /// true if Absolute Positioning handling is enabled in the editor
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetAbsolutePositioningEnabledAttribute();
		
		/// <summary>
        /// true if Absolute Positioning handling is enabled in the editor
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetAbsolutePositioningEnabledAttribute([MarshalAs(UnmanagedType.U1)] bool aAbsolutePositioningEnabled);
		
		/// <summary>
        /// true if Snap To Grid is enabled in the editor.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetSnapToGridEnabledAttribute();
		
		/// <summary>
        /// true if Snap To Grid is enabled in the editor.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetSnapToGridEnabledAttribute([MarshalAs(UnmanagedType.U1)] bool aSnapToGridEnabled);
		
		/// <summary>
        /// sets the grid size in pixels.
        /// @param aSizeInPixels [IN] the size of the grid in pixels
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetGridSizeAttribute();
		
		/// <summary>
        /// sets the grid size in pixels.
        /// @param aSizeInPixels [IN] the size of the grid in pixels
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetGridSizeAttribute(uint aGridSize);
		
		/// <summary>
        /// refreshes the grabber if it shown, possibly updating its position or
        /// even hiding it.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RefreshGrabber();
	}
}
