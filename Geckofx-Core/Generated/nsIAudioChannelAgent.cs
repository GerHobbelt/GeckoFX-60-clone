// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIAudioChannelAgent.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this file,
    /// You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("2822a840-f009-11e5-a837-0800200c9a66")]
	public interface nsISuspendedTypes
	{
	}
	
	/// <summary>nsISuspendedTypesConsts </summary>
	public class nsISuspendedTypesConsts
	{
		
		// <summary>
        // The suspended enum is used in three different situations,
        // - platform audio focus (Fennec/B2G)
        // - remote media control (Fennec)
        // - block auto-play video in non-active page
        //
        // Note: the "remote side" must control the AudioChannelAgent using
        // nsIAudioChannelAgentCallback.windowSuspendChanged() callback instead using
        // play/pause methods or any button in the webpage.
        //
        // - SUSPENDED_PAUSE :
        // It's used when transiently losing audio focus, the media can't be resumed
        // until we gain the audio focus again. It would change the internal state of
        // MediaElement when it's being suspended/resumed, and it would trigger the
        // related JS event. eg. "play" and "pause" event.
        //
        // - SUSPENDED_BLOCK
        // It's used to prevent auto-playing media in inactive page in order to
        // reduce the power consumption, and the media can't be resumed until the
        // page becomes active again. It would change the internal state of
        // MediaElement when it's being blocked/resumed, so it won't trigger the
        // related JS event. eg. "play" and "pause" event.
        //
        // - SUSPENDED_PAUSE_DISPOSABLE
        // It's used for remote media-control to pause the playing media and when we
        // lose audio focus permanently. It's disposable suspended, so the media can
        // be resumed arbitrary after that. Same as SUSPENDED_PAUSE, it would change
        // the internal state of MediaElement when it's being suspended.
        //
        // - SUSPENDED_STOP_DISPOSABLE
        // It's used for remote media-control to stop the playing media. The remote
        // control would disappear after stopping the media, so we would disconnect
        // the audio channel agent. It's disposable suspended, so the media can be
        // resumed arbitrary after that. Same as SUSPENDED_PAUSE, it would change
        // the internal state of MediaElement when it's being suspended.
        // </summary>
		public const long NONE_SUSPENDED = 0;
		
		// 
		public const long SUSPENDED_PAUSE = 1;
		
		// 
		public const long SUSPENDED_BLOCK = 2;
		
		// 
		public const long SUSPENDED_PAUSE_DISPOSABLE = 3;
		
		// 
		public const long SUSPENDED_STOP_DISPOSABLE = 4;
	}
	
	/// <summary>nsIAudioChannelAgentCallback </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("15c05894-408e-4798-b527-a8c32d9c5f8c")]
	public interface nsIAudioChannelAgentCallback
	{
		
		/// <summary>
        /// Notified when the window volume/mute is changed
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void WindowVolumeChanged(float aVolume, [MarshalAs(UnmanagedType.U1)] bool aMuted);
		
		/// <summary>
        /// Notified when the window needs to be suspended or resumed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void WindowSuspendChanged(uint aSuspend);
		
		/// <summary>
        /// Notified when the capture state is changed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void WindowAudioCaptureChanged([MarshalAs(UnmanagedType.U1)] bool aCapture);
	}
	
	/// <summary>
    /// This interface provides an agent for gecko components to participate
    /// in the audio channel service. Gecko components are responsible for
    /// 1. Notifying the agent when they start/stop using this channel.
    /// 2. Notifying the agent when they are audible.
    ///
    /// The agent will invoke a callback to notify Gecko components of
    /// 1. Changes to the playable status of this channel.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("4d212770-5d7b-446f-9394-632e351d96ee")]
	public interface nsIAudioChannelAgent
	{
		
		/// <summary>
        /// Initialize the agent with a channel type.
        /// Note: This function should only be called once.
        ///
        /// @param window
        /// The window
        /// @param callback
        /// 1. Once the playable status changes, agent uses this callback function
        /// to notify Gecko component.
        /// 2. The callback is allowed to be null. Ex: telephony doesn't need to
        /// listen change of the playable status.
        /// 3. The AudioChannelAgent keeps a strong reference to the callback
        /// object.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Init(mozIDOMWindow window, [MarshalAs(UnmanagedType.Interface)] nsIAudioChannelAgentCallback callback);
		
		/// <summary>
        /// This method is just like init(), except the audio channel agent keeps a
        /// weak reference to the callback object.
        ///
        /// In order for this to work, |callback| must implement
        /// nsISupportsWeakReference.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InitWithWeakCallback(mozIDOMWindow window, [MarshalAs(UnmanagedType.Interface)] nsIAudioChannelAgentCallback callback);
		
		/// <summary>
        /// Notify the agent that we want to start playing.
        /// Note: Gecko component SHOULD call this function first then start to
        /// play audio stream only when return value is true.
        ///
        /// @param config
        /// It contains the playback related states (volume/mute/suspend)
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyStartedPlaying(/* AudioPlaybackConfig */ nsISupports config, byte audible);
		
		/// <summary>
        /// Notify the agent we no longer want to play.
        ///
        /// Note : even if notifyStartedPlaying() returned false, the agent would
        /// still be registered with the audio channel service and receive callbacks
        /// for status changes. So notifyStoppedPlaying must still eventually be
        /// called to unregister the agent with the channel service.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyStoppedPlaying();
		
		/// <summary>
        /// Notify agent that we already start producing audible data.
        ///
        /// Note : sometime audio might become silent during playing, this method is used to
        /// notify the actually audible state to other services which want to know
        /// about that, ex. tab sound indicator.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyStartedAudible(byte audible, uint reason);
	}
	
	/// <summary>nsIAudioChannelAgentConsts </summary>
	public class nsIAudioChannelAgentConsts
	{
		
		// <summary>
        // This interface provides an agent for gecko components to participate
        // in the audio channel service. Gecko components are responsible for
        // 1. Notifying the agent when they start/stop using this channel.
        // 2. Notifying the agent when they are audible.
        //
        // The agent will invoke a callback to notify Gecko components of
        // 1. Changes to the playable status of this channel.
        // </summary>
		public const long AUDIO_AGENT_STATE_NORMAL = 0;
		
		// 
		public const long AUDIO_AGENT_STATE_MUTED = 1;
		
		// 
		public const long AUDIO_AGENT_STATE_FADED = 2;
	}
}
