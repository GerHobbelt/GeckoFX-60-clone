// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsISecretDecoderRing.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("0EC80360-075C-11d4-9FD4-00C04F1B83D8")]
	public interface nsISecretDecoderRing
	{
		
		/// <summary>
        /// Encrypt to Base64 output.
        /// Note that the input must basically be a byte array (i.e. the code points
        /// must be within the range [0, 255]). Hence, using this method directly to
        /// encrypt passwords (or any text, really) won't work as expected.
        /// Instead, use something like nsIScriptableUnicodeConverter to first convert
        /// the desired password or text to UTF-8, then encrypt that. Remember to
        /// convert back when calling decryptString().
        ///
        /// @param text The text to encrypt.
        /// @return The encrypted text, encoded as Base64.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EncryptString([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase text, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase retval);
		
		/// <summary>
        /// Run encryptString on multiple strings, asynchronously. This will allow you
        /// to not jank the browser if you need to encrypt a large number of strings
        /// all at once. This method accepts an array of wstrings which it will convert
        /// to UTF-8 internally before encrypting.
        ///
        /// @param plaintextsCount the number of strings to encrypt.
        /// @param plaintexts the strings to encrypt.
        /// @return A promise for the list of encrypted strings, encoded as Base64.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISupports AsyncEncryptStrings(uint plaintextsCount, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] System.IntPtr[] plaintexts, System.IntPtr jsContext);
		
		/// <summary>
        /// Decrypt Base64 input.
        /// See the encryptString() documentation - this method has basically the same
        /// limitations.
        ///
        /// @param encryptedBase64Text Encrypted input text, encoded as Base64.
        /// @return The decoded text.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DecryptString([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase encryptedBase64Text, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase retval);
		
		/// <summary>
        /// Prompt the user to change the password on the SDR key.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ChangePassword();
		
		/// <summary>
        /// Logout of the security device that protects the SDR key.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Logout();
		
		/// <summary>
        /// Logout of the security device that protects the SDR key and tear
        /// down authenticated objects.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void LogoutAndTeardown();
	}
}
