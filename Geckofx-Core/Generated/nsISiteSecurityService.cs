// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsISiteSecurityService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// [infallible] attributes are only allowed on [builtinclass]
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("31313372-842c-4110-bdf1-6aea17c845ad")]
	public interface nsISiteSecurityState
	{
		
		/// <summary>
        /// [infallible] attributes are only allowed on [builtinclass]
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetHostnameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aHostname);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		long GetExpireTimeAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		short GetSecurityPropertyStateAttribute();
		
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIncludeSubdomainsAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetOriginAttributesAttribute(System.IntPtr jsContext);
	}
	
	/// <summary>nsISiteSecurityStateConsts </summary>
	public class nsISiteSecurityStateConsts
	{
		
		// <summary>
        // SECURITY_PROPERTY_SET and SECURITY_PROPERTY_UNSET correspond to indicating
        // a site has or does not have the security property in question,
        // respectively.
        // SECURITY_PROPERTY_KNOCKOUT indicates a value on a preloaded
        // list is being overridden, and the associated site does not have the
        // security property in question.
        // SECURITY_PROPERTY_NEGATIVE is used when we've gotten a negative result from
        // HSTS priming.
        // </summary>
		public const short SECURITY_PROPERTY_UNSET = 0;
		
		// 
		public const short SECURITY_PROPERTY_SET = 1;
		
		// 
		public const short SECURITY_PROPERTY_KNOCKOUT = 2;
		
		// 
		public const short SECURITY_PROPERTY_NEGATIVE = 3;
	}
	
	/// <summary>
    /// This has to be a builtinclass because it derives from a builtinclass.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("9ff16e40-1029-496c-95c2-bc819872b216")]
	public interface nsISiteHSTSState : nsISiteSecurityState
	{
		
		/// <summary>
        /// [infallible] attributes are only allowed on [builtinclass]
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetHostnameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aHostname);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new long GetExpireTimeAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new short GetSecurityPropertyStateAttribute();
		
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool GetIncludeSubdomainsAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new Gecko.JsVal GetOriginAttributesAttribute(System.IntPtr jsContext);
	}
	
	/// <summary>
    /// This has to be a builtinclass because it derives from a builtinclass.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("ae395078-c7d0-474d-b147-f4aa203a9b2c")]
	public interface nsISiteHPKPState : nsISiteSecurityState
	{
		
		/// <summary>
        /// [infallible] attributes are only allowed on [builtinclass]
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void GetHostnameAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aHostname);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new long GetExpireTimeAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new short GetSecurityPropertyStateAttribute();
		
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool GetIncludeSubdomainsAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new Gecko.JsVal GetOriginAttributesAttribute(System.IntPtr jsContext);
		
		/// <summary>
        /// This has to be a builtinclass because it derives from a builtinclass.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISimpleEnumerator GetSha256KeysAttribute();
	}
	
	/// <summary>nsISiteSecurityService </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("275127f8-dbd7-4681-afbf-6df0c6587a01")]
	public interface nsISiteSecurityService
	{
		
		/// <summary>
        /// Parses a given HTTP header and records the results internally.
        /// Currently two header types are supported: HSTS (aka STS) and HPKP
        /// The format of the HSTS header is defined by the HSTS specification:
        /// https://tools.ietf.org/html/rfc6797
        /// and allows a host to specify that future HTTP requests should be
        /// upgraded to HTTPS.
        /// The format of the HPKP header is defined by the HPKP specification:
        /// https://tools.ietf.org/html/rfc7469
        /// and allows a host to specify a subset of trusted anchors to be used
        /// in future HTTPS connections.
        ///
        /// @param aType the type of security header in question.
        /// @param aSourceURI the URI of the resource with the HTTP header.
        /// @param aHeader the HTTP response header specifying security data.
        /// @param aSSLStatus the SSLStatus of the current channel.
        /// @param aFlags  options for this request as defined in nsISocketProvider:
        /// NO_PERMANENT_STORAGE
        /// @param aOriginAttributes the origin attributes that isolate this origin,
        /// (note that this implementation does not isolate
        /// by userContextId because of the risk of man-in-
        /// the-middle attacks before trust-on-second-use
        /// happens).
        /// @param aSource the source of the header, whether it was from the preload
        /// list, an organic header, or HSTS priming, or unknown.
        /// @param aMaxAge the parsed max-age directive of the header.
        /// @param aIncludeSubdomains the parsed includeSubdomains directive.
        /// @param aFailureResult a more specific failure result if NS_ERROR_FAILURE
        ///                             was returned.
        /// @return NS_OK            if it succeeds
        /// NS_ERROR_FAILURE if it can't be parsed
        /// NS_SUCCESS_LOSS_OF_INSIGNIFICANT_DATA
        /// if there are unrecognized tokens in the header.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ProcessHeaderNative(uint aType, [MarshalAs(UnmanagedType.Interface)] nsIURI aSourceURI, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aHeader, [MarshalAs(UnmanagedType.Interface)] nsISSLStatus aSSLStatus, uint aFlags, uint aSource, System.IntPtr aOriginAttributes, ref ulong aMaxAge, [MarshalAs(UnmanagedType.U1)] ref bool aIncludeSubdomains, ref uint aFailureResult);
		
		/// <summary>Member ProcessHeader </summary>
		/// <param name='aType'> </param>
		/// <param name='aSourceURI'> </param>
		/// <param name='aHeader'> </param>
		/// <param name='aSSLStatus'> </param>
		/// <param name='aFlags'> </param>
		/// <param name='aSource'> </param>
		/// <param name='aOriginAttributes'> </param>
		/// <param name='aMaxAge'> </param>
		/// <param name='aIncludeSubdomains'> </param>
		/// <param name='aFailureResult'> </param>
		/// <param name='jsContext'> </param>
		/// <param name='argc'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ProcessHeader(uint aType, [MarshalAs(UnmanagedType.Interface)] nsIURI aSourceURI, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aHeader, [MarshalAs(UnmanagedType.Interface)] nsISSLStatus aSSLStatus, uint aFlags, uint aSource, ref Gecko.JsVal aOriginAttributes, ref ulong aMaxAge, [MarshalAs(UnmanagedType.U1)] ref bool aIncludeSubdomains, ref uint aFailureResult, System.IntPtr jsContext, int argc);
		
		/// <summary>
        /// Given a header type, removes state relating to that header of a host,
        /// including the includeSubdomains state that would affect subdomains.
        /// This essentially removes the state for the domain tree rooted at this
        /// host.
        /// @param aType   the type of security state in question
        /// @param aURI    the URI of the target host
        /// @param aFlags  options for this request as defined in nsISocketProvider:
        /// NO_PERMANENT_STORAGE
        /// @param aOriginAttributes the origin attributes that isolate this origin,
        /// (note that this implementation does not isolate
        /// by userContextId because of the risk of man-in-
        /// the-middle attacks before trust-on-second-use
        /// happens).
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveState(uint aType, [MarshalAs(UnmanagedType.Interface)] nsIURI aURI, uint aFlags, ref Gecko.JsVal aOriginAttributes, System.IntPtr jsContext, int argc);
		
		/// <summary>
        /// Checks whether or not the URI's hostname has a given security state set.
        /// For example, for HSTS:
        /// The URI is an HSTS URI if either the host has the HSTS state set, or one
        /// of its super-domains has the HSTS "includeSubdomains" flag set.
        /// NOTE: this function makes decisions based only on the
        /// host contained in the URI, and disregards other portions of the URI
        /// such as path and port.
        ///
        /// @param aType the type of security state in question.
        /// @param aURI the URI to query for STS state.
        /// @param aFlags  options for this request as defined in nsISocketProvider:
        /// NO_PERMANENT_STORAGE
        /// @param aOriginAttributes the origin attributes that isolate this origin,
        /// (note that this implementation does not isolate
        /// by userContextId because of the risk of man-in-
        /// the-middle attacks before trust-on-second-use
        /// happens).
        /// @param aCached true if we have cached information about this host, even
        /// if the security state is false.
        /// @param aSource the source of the HSTS entry. One of SOURCE_PRELOAD_LIST,
        /// SOURCE_ORGANIC_REQUEST, SOURCE_HSTS_PRIMING, or
        /// SOURCE_UNKNOWN. Not implemented for HPKP.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsSecureURINative(uint aType, [MarshalAs(UnmanagedType.Interface)] nsIURI aURI, uint aFlags, System.IntPtr aOriginAttributes, [MarshalAs(UnmanagedType.U1)] ref bool aCached, ref uint aSource);
		
		/// <summary>Member IsSecureURI </summary>
		/// <param name='aType'> </param>
		/// <param name='aURI'> </param>
		/// <param name='aFlags'> </param>
		/// <param name='aOriginAttributes'> </param>
		/// <param name='aCached'> </param>
		/// <param name='aSource'> </param>
		/// <param name='jsContext'> </param>
		/// <param name='argc'> </param>
		/// <returns>A System.Boolean</returns>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsSecureURI(uint aType, [MarshalAs(UnmanagedType.Interface)] nsIURI aURI, uint aFlags, ref Gecko.JsVal aOriginAttributes, [MarshalAs(UnmanagedType.U1)] ref bool aCached, ref uint aSource, System.IntPtr jsContext, int argc);
		
		/// <summary>
        /// Removes all non-preloaded security state by resetting to factory-original
        /// settings.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ClearAll();
		
		/// <summary>
        /// Removes all preloaded security state.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ClearPreloads();
		
		/// <summary>
        /// Returns an array of sha256-hashed key pins for the given domain, if any.
        /// If these pins also apply to subdomains of the given domain,
        /// aIncludeSubdomains will be true. Pins returned are only for non-built-in
        /// pin entries.
        ///
        /// @param aHostname the hostname (punycode) to be queried about
        /// @param evalTime the time at which the pins should be valid. This is in
        ///              mozilla::pkix::Time which uses internally seconds since 0 AD.
        /// @param aOriginAttributes the origin attributes that isolate this origin,
        /// (note that this implementation does not isolate
        /// by userContextId because of the risk of man-in-
        /// the-middle attacks before trust-on-second-use
        /// happens).
        /// @param aPinArray the set of sha256-hashed key pins for the given domain
        /// @param aIncludeSubdomains true if the pins apply to subdomains of the
        /// given domain
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetKeyPinsForHostname([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aHostname, nsISupports evalTime, System.IntPtr aOriginAttributes, ref System.IntPtr aPinArray, [MarshalAs(UnmanagedType.U1)] ref bool aIncludeSubdomains);
		
		/// <summary>
        /// Set public-key pins for a host. The resulting pins will be permanent
        /// and visible from private and non-private contexts. These pins replace
        /// any already set by this mechanism or those built-in to Gecko.
        ///
        /// @param aHost the hostname (punycode) that pins will apply to
        /// @param aIncludeSubdomains whether these pins also apply to subdomains
        /// @param aExpires the time this pin should expire (millis since epoch)
        /// @param aPinCount number of keys being pinnned
        /// @param aSha256Pins array of hashed key fingerprints (SHA-256, base64)
        /// @param aIsPreload are these key pins for a preload entry? (false by
        /// default)
        /// @param aOriginAttributes the origin attributes that isolate this origin,
        /// (note that this implementation does not isolate
        /// by userContextId because of the risk of man-in-
        /// the-middle attacks before trust-on-second-use
        /// happens).
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool SetKeyPins([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aHost, [MarshalAs(UnmanagedType.U1)] bool aIncludeSubdomains, long aExpires, uint aPinCount, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=3)] string[] aSha256Pins, [MarshalAs(UnmanagedType.U1)] bool aIsPreload, ref Gecko.JsVal aOriginAttributes, System.IntPtr jsContext, int argc);
		
		/// <summary>
        /// Set an HSTS preload entry for a host. The resulting entries will be
        /// permanent and visible from private and non-private contexts. These
        /// entries replace any already set by this mechanism or those built-in to
        /// Gecko.
        ///
        /// @param aHost the hostname (punycode) that the entry applies to
        /// @param aIncludeSubdomains whether this entry also applies to subdomains
        /// @param aExpires the time this entry should expire (millis since epoch)
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool SetHSTSPreload([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aHost, [MarshalAs(UnmanagedType.U1)] bool aIncludesSubdomains, long aExpires);
		
		/// <summary>
        /// Returns an enumerator of the nsISiteSecurityService storage. Each item in
        /// the enumeration is a nsISiteSecurityState that can be QueryInterfaced to
        /// the appropriate nsISiteHSTSState or nsISiteHPKPState, depending on the
        /// provided type. Doesn't include preloaded entries (either the hard-coded
        /// ones or the preloaded-delivered-by-kinto ones).
        ///
        /// @param aType the type of security state in question.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISimpleEnumerator Enumerate(uint aType);
	}
	
	/// <summary>nsISiteSecurityServiceConsts </summary>
	public class nsISiteSecurityServiceConsts
	{
		
		// 
		public const long HEADER_HSTS = 0;
		
		// 
		public const long HEADER_HPKP = 1;
		
		// 
		public const long HEADER_OMS = 2;
		
		// 
		public const long Success = 0;
		
		// 
		public const long ERROR_UNKNOWN = 1;
		
		// 
		public const long ERROR_UNTRUSTWORTHY_CONNECTION = 2;
		
		// 
		public const long ERROR_COULD_NOT_PARSE_HEADER = 3;
		
		// 
		public const long ERROR_NO_MAX_AGE = 4;
		
		// 
		public const long ERROR_MULTIPLE_MAX_AGES = 5;
		
		// 
		public const long ERROR_INVALID_MAX_AGE = 6;
		
		// 
		public const long ERROR_MULTIPLE_INCLUDE_SUBDOMAINS = 7;
		
		// 
		public const long ERROR_INVALID_INCLUDE_SUBDOMAINS = 8;
		
		// 
		public const long ERROR_INVALID_PIN = 9;
		
		// 
		public const long ERROR_MULTIPLE_REPORT_URIS = 10;
		
		// 
		public const long ERROR_PINSET_DOES_NOT_MATCH_CHAIN = 11;
		
		// 
		public const long ERROR_NO_BACKUP_PIN = 12;
		
		// 
		public const long ERROR_COULD_NOT_SAVE_STATE = 13;
		
		// 
		public const long ERROR_ROOT_NOT_BUILT_IN = 14;
		
		// <summary>
        // nsISiteSecurityService::IsSecureURI can optionally return a flag
        // indicating the source of the HSTS cache entry, if it comes from the
        // preload list, was seen naturally, or is a result of HSTS priming.
        // </summary>
		public const long SOURCE_UNKNOWN = 0;
		
		// 
		public const long SOURCE_PRELOAD_LIST = 1;
		
		// 
		public const long SOURCE_ORGANIC_REQUEST = 2;
	}
}
