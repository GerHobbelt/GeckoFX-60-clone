// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIProfiler.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// Start-up parameters for subprocesses are passed through nsIObserverService,
    /// which, unfortunately, means we need to implement nsISupports in order to
    /// go through it.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("0a175ba7-8fcf-4ce9-9c4b-ccc6272f4425")]
	public interface nsIProfilerStartParams
	{
		
		/// <summary>
        /// Start-up parameters for subprocesses are passed through nsIObserverService,
        /// which, unfortunately, means we need to implement nsISupports in order to
        /// go through it.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetEntriesAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetIntervalAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetFeaturesAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.IntPtr GetFilters();
	}
	
	/// <summary>nsIProfiler </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("ead3f75c-0e0e-4fbb-901c-1e5392ef5b2a")]
	public interface nsIProfiler
	{
		
		/// <summary>Member CanProfile </summary>
		/// <returns>A System.Boolean</returns>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool CanProfile();
		
		/// <summary>Member StartProfiler </summary>
		/// <param name='aEntries'> </param>
		/// <param name='aInterval'> </param>
		/// <param name='aFeatures'> </param>
		/// <param name='aFeatureCount'> </param>
		/// <param name='aFilters'> </param>
		/// <param name='aFilterCount'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StartProfiler(uint aEntries, double aInterval, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=3)] string[] aFeatures, uint aFeatureCount, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=5)] string[] aFilters, uint aFilterCount);
		
		/// <summary>Member StopProfiler </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StopProfiler();
		
		/// <summary>Member IsPaused </summary>
		/// <returns>A System.Boolean</returns>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsPaused();
		
		/// <summary>Member PauseSampling </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PauseSampling();
		
		/// <summary>Member ResumeSampling </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ResumeSampling();
		
		/// <summary>Member AddMarker </summary>
		/// <param name='aMarker'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddMarker([MarshalAs(UnmanagedType.LPStr)] string aMarker);
		
		/// <summary>
        /// Returns the JSON string of the profile. If aSinceTime is passed, only
        /// report samples taken at >= aSinceTime.
        /// </summary>
		[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.StringMarshaler")]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		string GetProfile(double aSinceTime);
		
		/// <summary>
        /// Returns a JS object of the profile. If aSinceTime is passed, only report
        /// samples taken at >= aSinceTime.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetProfileData(double aSinceTime, System.IntPtr jsContext);
		
		/// <summary>Member GetProfileDataAsync </summary>
		/// <param name='aSinceTime'> </param>
		/// <param name='jsContext'> </param>
		/// <returns>A nsISupports</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISupports GetProfileDataAsync(double aSinceTime, System.IntPtr jsContext);
		
		/// <summary>Member GetProfileDataAsArrayBuffer </summary>
		/// <param name='aSinceTime'> </param>
		/// <param name='jsContext'> </param>
		/// <returns>A nsISupports</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISupports GetProfileDataAsArrayBuffer(double aSinceTime, System.IntPtr jsContext);
		
		/// <summary>
        /// Returns a promise that resolves once the file has been written.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISupports DumpProfileToFileAsync([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aFilename, double aSinceTime, System.IntPtr jsContext);
		
		/// <summary>Member IsActive </summary>
		/// <returns>A System.Boolean</returns>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsActive();
		
		/// <summary>
        /// Returns an array of the features that are supported in this build.
        /// Features may vary depending on platform and build flags.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetFeatures(ref uint aCount, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] ref string[] aFeatures);
		
		/// <summary>
        /// Returns an array of all features that are supported by the profiler.
        /// The array may contain features that are not supported in this build.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetAllFeatures(ref uint aCount, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] ref string[] aFeatures);
		
		/// <summary>
        /// The starting parameters that were sent to the profiler for sampling.
        /// If the profiler is not currently sampling, this will return null.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIProfilerStartParams GetStartParamsAttribute();
		
		/// <summary>Member GetBufferInfo </summary>
		/// <param name='aCurrentPosition'> </param>
		/// <param name='aTotalSize'> </param>
		/// <param name='aGeneration'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetBufferInfo(ref uint aCurrentPosition, ref uint aTotalSize, ref uint aGeneration);
		
		/// <summary>
        /// Returns the elapsed time, in milliseconds, since the profiler's epoch.
        /// The epoch is guaranteed to be constant for the duration of the
        /// process, but is otherwise arbitrary.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetElapsedTime();
		
		/// <summary>
        /// Contains an array of shared library objects.
        /// Every object has the properties:
        /// - start:      The start address of the memory region occupied by this library.
        /// - end:        The end address of the memory region occupied by this library.
        /// - offset:     Usually zero, except on Android if the region was mapped from
        /// a file (using mmap), then this is the offset in the file where
        /// the mapping begins.
        /// - name:       The name (file basename) of the binary.
        /// - path:       The full absolute path to the binary.
        /// - debugName:  On Windows, the name of the pdb file for the binary. On other
        /// platforms, the same as |name|.
        /// - debugPath:  On Windows, the full absolute path of the pdb file for the
        /// binary. On other platforms, the same as |path|.
        /// - arch:       On Mac, the name of the architecture that identifies the right
        /// binary image of a fat binary. Example values are "i386", "x86_64",
        /// and "x86_64h". (x86_64h is used for binaries that contain
        /// instructions that are specific to the Intel Haswell microarchitecture.)
        /// On non-Mac platforms, arch is "".
        /// - breakpadId: A unique identifier string for this library, as used by breakpad.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetSharedLibrariesAttribute(System.IntPtr jsContext);
		
		/// <summary>
        /// Dump the collected profile to a file.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DumpProfileToFile([MarshalAs(UnmanagedType.LPStr)] string aFilename);
		
		/// <summary>Member ReceiveShutdownProfile </summary>
		/// <param name='aProfile'> </param>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ReceiveShutdownProfile(nsISupports aProfile);
	}
}
