// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIContentProcess.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("456f58be-29dd-4973-885b-95aece1c9a8a")]
	public interface nsIContentProcessInfo
	{
		
		/// <summary>
        /// Is this content process alive?
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIsAliveAttribute();
		
		/// <summary>
        /// The content process's PID.
        /// Throws if the process is not alive.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetProcessIdAttribute();
		
		/// <summary>
        /// This content process's opener.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIContentProcessInfo GetOpenerAttribute();
		
		/// <summary>
        /// Number of opened tabs living in this content process.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetTabCountAttribute();
		
		/// <summary>
        /// The process manager for this ContentParent (so a process message manager
        /// as opposed to a frame message manager.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIMessageSender GetMessageManagerAttribute();
	}
	
	/// <summary>nsIContentProcessProvider </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("83ffb063-5f65-4c45-ae07-3f553e0809bb")]
	public interface nsIContentProcessProvider
	{
		
		/// <summary>
        /// Given aAliveProcesses (with an opener aOpener), choose which process of
        /// aType to use. Return nsIContentProcessProvider.NEW_PROCESS to ask the
        /// caller to create a new content process.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int ProvideProcess([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aType, [MarshalAs(UnmanagedType.Interface)] nsIContentProcessInfo aOpener, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=3)] nsIContentProcessInfo[] aAliveProcesses, uint aCount, uint aMaxCount);
	}
	
	/// <summary>nsIContentProcessProviderConsts </summary>
	public class nsIContentProcessProviderConsts
	{
		
		// <summary>
        // Return this from provideProcess to create a new process.
        // </summary>
		public const long NEW_PROCESS = -1;
	}
}
