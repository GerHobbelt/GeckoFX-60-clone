// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIThrottledInputChannel.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// An instance of this interface can be used to throttle the uploads
    /// of a group of associated channels.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("6b4b96fe-3c67-4587-af7b-58b6b17da411")]
	public interface nsIInputChannelThrottleQueue
	{
		
		/// <summary>
        /// Initialize this object with the mean and maximum bytes per
        /// second that will be allowed.  Neither value may be zero, and
        /// the maximum must not be less than the mean.
        ///
        /// @param aMeanBytesPerSecond
        /// Mean number of bytes per second.
        /// @param aMaxBytesPerSecond
        /// Maximum number of bytes per second.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Init(uint aMeanBytesPerSecond, uint aMaxBytesPerSecond);
		
		/// <summary>
        /// Return the number of bytes that are available to the caller in
        /// this time slice.
        ///
        /// @param aRemaining
        /// The number of bytes available to be processed
        /// @return the number of bytes allowed to be processed during this
        /// time slice; this will never be greater than aRemaining.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint Available(uint aRemaining);
		
		/// <summary>
        /// Record a successful read.
        ///
        /// @param aBytesRead
        /// The number of bytes actually read.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RecordRead(uint aBytesRead);
		
		/// <summary>
        /// Return the number of bytes allowed through this queue.  This is
        /// the sum of all the values passed to recordRead.  This method is
        /// primarily useful for testing.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint BytesProcessed();
		
		/// <summary>
        /// Wrap the given input stream in a new input stream which
        /// throttles the incoming data.
        ///
        /// @param aInputStream the input stream to wrap
        /// @return a new input stream that throttles the data.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIAsyncInputStream WrapStream([MarshalAs(UnmanagedType.Interface)] nsIInputStream aInputStream);
	}
	
	/// <summary>
    /// A throttled input channel can be managed by an
    /// nsIInputChannelThrottleQueue to limit how much data is sent during
    /// a given time slice.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("0a32a100-c031-45b6-9e8b-0444c7d4a143")]
	public interface nsIThrottledInputChannel
	{
		
		/// <summary>
        /// The queue that manages this channel.  Multiple channels can
        /// share a single queue.  A null value means that no throttling
        /// will be done.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIInputChannelThrottleQueue GetThrottleQueueAttribute();
		
		/// <summary>
        /// The queue that manages this channel.  Multiple channels can
        /// share a single queue.  A null value means that no throttling
        /// will be done.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetThrottleQueueAttribute([MarshalAs(UnmanagedType.Interface)] nsIInputChannelThrottleQueue aThrottleQueue);
	}
}
