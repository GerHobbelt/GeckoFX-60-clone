// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIAboutNewTabService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// Allows to override about:newtab to point to a different location
    /// than the one specified within AboutRedirector.cpp
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("dfcd2adc-7867-4d3a-ba70-17501f208142")]
	public interface nsIAboutNewTabService
	{
		
		/// <summary>
        /// Returns the url of the resource for the newtab page if not overridden,
        /// otherwise a string represenation of the new URL.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetNewTabURLAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aNewTabURL);
		
		/// <summary>
        /// Returns the url of the resource for the newtab page if not overridden,
        /// otherwise a string represenation of the new URL.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetNewTabURLAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aNewTabURL);
		
		/// <summary>
        /// Returns the default URL (local or activity stream depending on pref)
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetDefaultURLAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aDefaultURL);
		
		/// <summary>
        /// Returns the default URL (local or activity stream depending on pref)
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetDefaultURLAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aDefaultURL);
		
		/// <summary>
        /// Returns true if opening the New Tab page will notify the user of a change.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetWillNotifyUserAttribute();
		
		/// <summary>
        /// Returns true if opening the New Tab page will notify the user of a change.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetWillNotifyUserAttribute([MarshalAs(UnmanagedType.U1)] bool aWillNotifyUser);
		
		/// <summary>
        /// Returns true if the default resource got overridden.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetOverriddenAttribute();
		
		/// <summary>
        /// Returns true if the default resource is activity stream and isn't
        /// overridden
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetActivityStreamEnabledAttribute();
		
		/// <summary>
        /// Returns true if the the prerendering pref for activity stream is true
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetActivityStreamPrerenderAttribute();
		
		/// <summary>
        /// Returns true if the the debug pref for activity stream is true
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetActivityStreamDebugAttribute();
		
		/// <summary>
        /// Returns the locale of the activity stream interface
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetActivityStreamLocaleAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aActivityStreamLocale);
		
		/// <summary>
        /// Resets to the default resource and also resets the
        /// overridden attribute to false.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ResetNewTabURL();
	}
}
