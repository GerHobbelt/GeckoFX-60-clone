// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file mozILocaleService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("C27F8983-B48B-4D1A-92D7-FEB8106F212D")]
	public interface mozILocaleService
	{
		
		/// <summary>
        /// Default locale of the browser. The locale we are guaranteed to have
        /// resources for that should be used as a last resort fallack in cases
        /// where requested locales do not match available locales.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetDefaultLocaleAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aDefaultLocale);
		
		/// <summary>
        /// Last fallback is the final fallback locale we're going to attempt if all
        /// else fails in any language negotiation or locale resource retrieval situations.
        ///
        /// At the moment it returns `en-US`.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetLastFallbackLocaleAttribute([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aLastFallbackLocale);
		
		/// <summary>
        /// Returns a list of locales that the application should be localized to.
        ///
        /// The result is a ordered list of valid locale IDs and it should be
        /// used for all APIs that accept list of locales, like ECMA402 and L10n APIs.
        ///
        /// This API always returns at least one locale.
        ///
        /// When retrieving the locales for language negotiation and matching
        /// to language resources, use the language tag form.
        /// When retrieving the locales for Intl API or ICU locale settings,
        /// use the BCP47 form.
        ///
        /// Example: ["en-US", "de", "pl", "sr-Cyrl", "zh-Hans-HK"]
        ///
        /// (See LocaleService.h for a more C++-friendly version of this.)
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetAppLocalesAsLangTags(ref uint aCount, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] ref string[] aLocales);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetAppLocalesAsBCP47(ref uint aCount, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] ref string[] aLocales);
		
		/// <summary>
        /// Returns a list of locales to use for any regional specific operations
        /// like date formatting, calendars, unit formatting etc.
        ///
        /// The result is a ordered list of valid locale IDs and it should be
        /// used for all APIs that accept list of locales, like ECMA402 and L10n APIs.
        ///
        /// This API always returns at least one locale.
        ///
        /// Example: ["en-US", "de", "pl", "sr-Cyrl", "zh-Hans-HK"]
        ///
        /// (See LocaleService.h for a more C++-friendly version of this.)
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetRegionalPrefsLocales(ref uint aCount, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] ref string[] aOutArray);
		
		/// <summary>
        /// Negotiates the best locales out of a ordered list of requested locales and
        /// a list of available locales.
        ///
        /// Internally it uses the following naming scheme:
        ///
        /// Requested - locales requested by the user
        /// Available - locales for which the data is available
        /// Supported - locales negotiated by the algorithm
        ///
        /// Additionally, if defaultLocale is provided, it adds it to the end of the
        /// result list as a "last resort" locale.
        ///
        /// Strategy is one of the three strategies described at the top of this file.
        ///
        /// The result list is canonicalized and ordered according to the order
        /// of the requested locales.
        ///
        /// (See LocaleService.h for a more C++-friendly version of this.)
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NegotiateLanguages([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=4)] string[] aRequested, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=5)] string[] aAvailable, [MarshalAs(UnmanagedType.LPStr)] string aDefaultLocale, int langNegStrategy, uint aRequestedCount, uint aAvailableCount, ref uint aCount, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=6)] ref string[] aLocales);
		
		/// <summary>
        /// Returns the best locale that the application should be localized to.
        ///
        /// The result is a valid locale ID and it should be
        /// used for all APIs that do not handle language negotiation.
        ///
        /// When retrieving the locales for language negotiation and matching
        /// to language resources, use the language tag form.
        /// When retrieving the locales for Intl API or ICU locale settings,
        /// use the BCP47 form.
        ///
        /// Where possible, getAppLocales*() should be preferred over this API and
        /// all callsites should handle some form of "best effort" language
        /// negotiation to respect user preferences in case the use case does
        /// not have data for the first locale in the list.
        ///
        /// Example: "zh-Hans-HK"
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetAppLocaleAsLangTag([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase retval);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetAppLocaleAsBCP47([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase retval);
		
		/// <summary>
        /// Returns a list of locales that the user requested the app to be
        /// localized to.
        ///
        /// The result is an ordered list of locale IDs which should be
        /// used as a requestedLocales input list for language negotiation.
        ///
        /// Example: ["en-US", "de", "pl", "sr-Cyrl", "zh-Hans-HK"]
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetRequestedLocales(ref uint aCount, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] ref string[] aLocales);
		
		/// <summary>
        /// Returns the top-requested locale from the user, or an empty string if none is set.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetRequestedLocale([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase retval);
		
		/// <summary>
        /// Sets a list of locales that the user requested the app to be
        /// localized to.
        ///
        /// The argument is an ordered list of locale IDs which should be
        /// used as a requestedLocales input list for language negotiation.
        ///
        /// The current implementation is limited to handle at most one
        /// locale passed to the API. In the future we'll transition to support
        /// whole fallback chain.
        ///
        /// If an empty list is passed, the list of requested locales will
        /// be picked from the operating system.
        ///
        /// Example: ["de"]
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetRequestedLocales([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] string[] aRequested, uint aRequestedCount);
		
		/// <summary>
        /// Returns a list of locales that the app can be localized to.
        ///
        /// The result is an unordered list of locale IDs which should be
        /// used as a availableLocales input list for language negotiation.
        ///
        /// Example: ["en-US", "de", "pl", "sr-Cyrl", "zh-Hans-HK"]
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetAvailableLocales(ref uint aCount, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] ref string[] aLocales);
		
		/// <summary>
        /// Returns whether the current app locale is RTL.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIsAppLocaleRTLAttribute();
		
		/// <summary>
        /// Sets a list of locales the application has resources to be localized into.
        ///
        /// The primary use of this function is to let L10nRegistry communicate all
        /// locale updates.
        ///
        /// The secondary use case is for testing purposes in scenarios in which the
        /// actual resources don't have to be available.
        /// It is recommended for tests to create a mock FileSource and register it in
        /// the L10nRegistry rather than using this call, in order to emulate full
        /// resource availability cycle.
        ///
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetAvailableLocales([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] string[] aAvailable, uint aAvailableCount);
		
		/// <summary>
        /// Returns a list of locales packaged into the app bundle.
        ///
        /// Example: ["en-US", "de", "pl", "sr-Cyrl", "zh-Hans-HK"]
        ///
        /// (See LocaleService.h for a more C++-friendly version of this.)
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetPackagedLocales(ref uint aCount, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] ref string[] aOutArray);
	}
	
	/// <summary>mozILocaleServiceConsts </summary>
	public class mozILocaleServiceConsts
	{
		
		// <summary>
        // List of language negotiation strategies to use.
        // For an example list of requested and available locales:
        //
        // Requested: ['es-MX', 'fr-FR']
        // Available: ['fr', 'fr-CA', 'es', 'es-MX', 'it']
        // DefaultLocale: ['en-US']
        //
        // each of those strategies will build a different result:
        //
        //
        // filtering (default) -
        // Matches as many of the available locales as possible.
        //
        // Result:
        // Supported: ['es-MX', 'es', 'fr', 'fr-CA', 'en-US']
        //
        // matching -
        // Matches the best match from the available locales for every requested
        // locale.
        //
        // Result:
        // Supported: ['es-MX', 'fr', 'en-US']
        //
        // lookup -
        // Matches a single best locale. This strategy always returns a list
        // of the length 1 and requires a defaultLocale to be set.
        //
        // Result:
        // Supported: ['es-MX']
        // </summary>
		public const long langNegStrategyFiltering = 0;
		
		// 
		public const long langNegStrategyMatching = 1;
		
		// 
		public const long langNegStrategyLookup = 2;
	}
}
