// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIMultiplexInputStream.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// The multiplex stream concatenates a list of input streams into a single
    /// stream.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("a076fd12-1dd1-11b2-b19a-d53b5dffaade")]
	public interface nsIMultiplexInputStream
	{
		
		/// <summary>
        /// Number of streams in this multiplex-stream
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetCountAttribute();
		
		/// <summary>
        /// Appends a stream to the end of the streams. The cursor of the stream
        /// should be located at the beginning of the stream if the implementation
        /// of this nsIMultiplexInputStream also is used as an nsISeekableStream.
        /// @param stream  stream to append
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AppendStream([MarshalAs(UnmanagedType.Interface)] nsIInputStream stream);
		
		/// <summary>
        /// Get stream at specified index.
        /// @param index   return stream at this index, must be < count
        /// @return        stream at specified index
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIInputStream GetStream(uint index);
	}
}
