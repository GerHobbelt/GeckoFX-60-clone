// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIBrowser.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("14e5a0cb-e223-4202-95e8-fe53275193ea")]
	public interface nsIBrowser
	{
		
		/// <summary>
        /// Gets an optional frame loader that is "related" to this browser.
        /// If this exists, then we should attempt to use the same content parent as
        /// this frame loader for any new tab parents.  For example, view source
        /// browsers set this to the frame loader for the original content to ensure
        /// they are loaded in the same process as the content.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.IntPtr GetSameProcessAsFrameLoaderAttribute();
		
		/// <summary>
        /// Called by the child to inform the parent that links are dropped into
        /// content area.
        ///
        /// @param linksCount length of links
        /// @param links a flat array of url, name, and type for each link
        /// @param triggeringPrincipal a principal that initiated loading
        /// of the dropped links
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DropLinks(uint linksCount, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] System.IntPtr[] links, [MarshalAs(UnmanagedType.Interface)] nsIPrincipal aTriggeringPrincipal);
		
		/// <summary>
        /// Swapping of frameloaders are usually initiated from a frameloader owner
        /// or other components operating on frameloader owners. This is done by calling
        /// swapFrameLoaders at MozFrameLoaderOwner webidl interface.
        ///
        /// This function aimed to provide the other way around -
        /// if the swapping is initiated from frameloader itself or other platform level
        /// components, it uses this interface to delegate the swapping request to
        /// frameloader owners and ask them to re-initiate frameloader swapping, so that
        /// frameloader owners such as <xul:browser> can setup their properties and /
        /// or listeners properly on swapping.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SwapBrowsers([MarshalAs(UnmanagedType.Interface)] nsIBrowser aOtherBrowser, uint aFlags);
		
		/// <summary>
        /// Close the browser (usually means to remove a tab).
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CloseBrowser();
	}
	
	/// <summary>nsIBrowserConsts </summary>
	public class nsIBrowserConsts
	{
		
		// <summary>
        // The default options. This is used for swapping browsers between windows
        // </summary>
		public const ulong SWAP_DEFAULT = 0;
		
		// <summary>
        // If this bit is set, swapping the browsers will not swap the permanentKey of
        // the browsers. This is used when performing cross process loads by swapping
        // browsers.
        // </summary>
		public const ulong SWAP_KEEP_PERMANENT_KEY = 0x1;
	}
}
