// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file mozIMozIntlHelper.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// This is an internal helper for mozIMozIntl API. There should be virtually
    /// no reason for you to call this API except from mozIMozIntl implementation.
    ///
    /// This API helps accessing the SpiderMonkey Intl APIs, but it is mozIMozIntl
    /// that exposes the thin wrapper around them that binds the functionality
    /// to Gecko.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("189eaa7d-b29a-43a9-b1fb-7658990df940")]
	public interface mozIMozIntlHelper
	{
		
		/// <summary>
        /// This is an internal helper for mozIMozIntl API. There should be virtually
        /// no reason for you to call this API except from mozIMozIntl implementation.
        ///
        /// This API helps accessing the SpiderMonkey Intl APIs, but it is mozIMozIntl
        /// that exposes the thin wrapper around them that binds the functionality
        /// to Gecko.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddGetCalendarInfo(ref Gecko.JsVal intlObject, System.IntPtr jsContext);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddGetDisplayNames(ref Gecko.JsVal intlObject, System.IntPtr jsContext);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddGetLocaleInfo(ref Gecko.JsVal intlObject, System.IntPtr jsContext);
		
		/// <summary>
        /// Adds a MozDateTimeFormat contructor to the given object. This function may only
        /// be called once within a realm/global object: calling it multiple times will
        /// throw.
        ///
        /// The difference between regular Intl.DateTimeFormat and the method created here
        /// is that we support two more options:
        ///
        /// timeStyle: full | long | medium | short
        /// dateStyle: full | long | medium | short
        ///
        /// which allow user to create normalized date/time style formats.
        /// Additionally, when those options are used instead of the regular atomic
        /// options (hour, minute, month, etc.) this code will look into host
        /// Operating System regional preferences and adjust for that.
        ///
        /// That means that if user will manually select time format (hour12/24) or
        /// adjust how the date should be displayed, MozDateTimeFormat will use that.
        ///
        /// This API should be used everywhere in the UI instead of regular Intl  API.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddDateTimeFormatConstructor(ref Gecko.JsVal intlObject, System.IntPtr jsContext);
	}
}
