// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIPaymentRequestService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// nsPaymentRequestService is used to manage the created PaymentRequest in the
    /// chrome process. It is also the IPC agent for payment UI to communicate with
    /// merchant side.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("cccd665f-edf3-41fc-ab9b-fc55b37340aa")]
	public interface nsIPaymentRequestService
	{
		
		/// <summary>
        /// Get the nsIPaymentRequest through the given payment request identifier.
        /// @param aRequestId - the payment request identifier.
        /// This is an internal id generated by Gecko.
        /// @return           - the requested payment request. null if there is no
        /// coressponding nsIPaymentRequest for aRequestId.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPaymentRequest GetPaymentRequestById([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aRequestId);
		
		/// <summary>
        /// Get the enumerator for all managed nsIPaymentRequests.
        /// @return - an enumerator for all managed nsIPaymentRequests.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISimpleEnumerator Enumerate();
		
		/// <summary>
        /// Send the user's response to the merchant.
        /// @param aResponse - the user's response.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RespondPayment([MarshalAs(UnmanagedType.Interface)] nsIPaymentActionResponse aResponse);
		
		/// <summary>
        /// Inform the merchant the shipping addres has changed.
        /// @param requestId - the request identifier of the payment request.
        /// @param aAddress - the new payment address.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ChangeShippingAddress([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase requestId, [MarshalAs(UnmanagedType.Interface)] nsIPaymentAddress aAddress);
		
		/// <summary>
        /// Inform the merchant the shipping option has changed.
        /// @param requestId - the request identifier of the payment request.
        /// @param option - the shipping option ID string.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ChangeShippingOption([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase requestId, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase option);
		
		/// <summary>
        /// Clean up the all managed payment requests.
        /// This API is for testing only.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Cleanup();
		
		/// <summary>
        /// Setup the customized nsIPaymentUIService.
        /// This API is for testing only.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetTestingUIService([MarshalAs(UnmanagedType.Interface)] nsIPaymentUIService aUIService);
		
		/// <summary>
        /// Request a specified action on the specified PaymentRequest.
        /// @param aRequest - the requested action.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RequestPayment([MarshalAs(UnmanagedType.Interface)] nsIPaymentActionRequest aRequest);
		
		/// <summary>
        /// This is a cleanup function to break the association between
        /// nsIPaymentRequestService and nsIPaymentActionCallback.
        /// nsIPaymentActionCallback is an interface that registered to
        /// nsIPaymentRequestService when the merchant asks to perform actions, and it
        /// will be called when user's response send back to nsIPaymentRequestService.
        /// @param aCallback - the specified nsIPaymentActionCallback.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveActionCallback([MarshalAs(UnmanagedType.Interface)] nsIPaymentActionCallback aCallback);
	}
}
