// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIPresentationService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this file,
    /// You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("12073206-0065-4b10-9488-a6eb9b23e65b")]
	public interface nsIPresentationServiceCallback
	{
		
		/// <summary>
        /// Called when the operation succeeds.
        ///
        /// @param url: the selected request url used to start or reconnect a session.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifySuccess([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase url);
		
		/// <summary>
        /// Called when the operation fails.
        ///
        /// @param error: error message.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyError(int error);
	}
	
	/// <summary>nsIPresentationService </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("de42b741-5619-4650-b961-c2cebb572c95")]
	public interface nsIPresentationService
	{
		
		/// <summary>
        /// Start a new presentation session and display a prompt box which asks users
        /// to select a device.
        ///
        /// @param urls: The candidate Urls of presenting page. Only one url would be used.
        /// @param sessionId: An ID to identify presentation session.
        /// @param origin: The url of requesting page.
        /// @param deviceId: The specified device of handling this request, null string
        /// for prompt device selection dialog.
        /// @param windowId: The inner window ID associated with the presentation
        /// session. (0 implies no window ID since no actual window
        /// uses 0 as its ID. Generally it's the case the window is
        /// located in different process from this service)
        /// @param eventTarget: The chrome event handler, in particular XUL browser
        /// element in parent process, that the request was
        /// originated in.
        /// @param principal: The principal that initiated the session.
        /// @param callback: Invoke the callback when the operation is completed.
        /// NotifySuccess() is called with |id| if a session is
        /// established successfully with the selected device.
        /// Otherwise, NotifyError() is called with a error message.
        /// @param constructor: The constructor for creating a transport builder.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StartSession(nsISupports urls, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionId, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase origin, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase deviceId, ulong windowId, [MarshalAs(UnmanagedType.Interface)] nsIDOMEventTarget eventTarget, [MarshalAs(UnmanagedType.Interface)] nsIPrincipal principal, [MarshalAs(UnmanagedType.Interface)] nsIPresentationServiceCallback callback, [MarshalAs(UnmanagedType.Interface)] nsIPresentationTransportBuilderConstructor constructor);
		
		/// <summary>
        /// Send the message to the session.
        ///
        /// @param sessionId: An ID to identify presentation session.
        /// @param role: Identify the function called by controller or receiver.
        /// @param data: the message being sent out.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendSessionMessage([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionId, byte role, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase data);
		
		/// <summary>
        /// Send the binary message to the session.
        ///
        /// @param sessionId: An ID to identify presentation session.
        /// @param role: Identify the function called by controller or receiver.
        /// @param data: the message being sent out.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendSessionBinaryMsg([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionId, byte role, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase data);
		
		/// <summary>
        /// Send the blob to the session.
        ///
        /// @param sessionId: An ID to identify presentation session.
        /// @param role: Identify the function called by controller or receiver.
        /// @param blob: The input blob to be sent.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendSessionBlob([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionId, byte role, [MarshalAs(UnmanagedType.Interface)] nsIDOMBlob blob);
		
		/// <summary>
        /// Close the session.
        ///
        /// @param sessionId: An ID to identify presentation session.
        /// @param role: Identify the function called by controller or receiver.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CloseSession([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionId, byte role, byte closedReason);
		
		/// <summary>
        /// Terminate the session.
        ///
        /// @param sessionId: An ID to identify presentation session.
        /// @param role: Identify the function called by controller or receiver.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void TerminateSession([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionId, byte role);
		
		/// <summary>
        /// Reconnect the session.
        ///
        /// @param url: The request Urls.
        /// @param sessionId: An ID to identify presentation session.
        /// @param role: Identify the function called by controller or receiver.
        /// @param callback: NotifySuccess() is called when a control channel
        /// is opened successfully.
        /// Otherwise, NotifyError() is called with a error message.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ReconnectSession(nsISupports urls, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionId, byte role, [MarshalAs(UnmanagedType.Interface)] nsIPresentationServiceCallback callback);
		
		/// <summary>
        /// Register an availability listener. Must be called from the main thread.
        ///
        /// @param availabilityUrls: The Urls that this listener is interested in.
        /// @param listener: The listener to register.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RegisterAvailabilityListener(nsISupports availabilityUrls, [MarshalAs(UnmanagedType.Interface)] nsIPresentationAvailabilityListener listener);
		
		/// <summary>
        /// Unregister an availability listener. Must be called from the main thread.
        ///
        /// @param availabilityUrls: The Urls that are registered before.
        /// @param listener: The listener to unregister.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UnregisterAvailabilityListener(nsISupports availabilityUrls, [MarshalAs(UnmanagedType.Interface)] nsIPresentationAvailabilityListener listener);
		
		/// <summary>
        /// Register a session listener. Must be called from the main thread.
        ///
        /// @param sessionId: An ID to identify presentation session.
        /// @param role: Identify the function called by controller or receiver.
        /// @param listener: The listener to register.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RegisterSessionListener([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionId, byte role, [MarshalAs(UnmanagedType.Interface)] nsIPresentationSessionListener listener);
		
		/// <summary>
        /// Unregister a session listener. Must be called from the main thread.
        ///
        /// @param sessionId: An ID to identify presentation session.
        /// @param role: Identify the function called by controller or receiver.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UnregisterSessionListener([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionId, byte role);
		
		/// <summary>
        /// Register a responding listener. Must be called from the main thread.
        ///
        /// @param windowId: The window ID associated with the listener.
        /// @param listener: The listener to register.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RegisterRespondingListener(ulong windowId, [MarshalAs(UnmanagedType.Interface)] nsIPresentationRespondingListener listener);
		
		/// <summary>
        /// Unregister a responding listener. Must be called from the main thread.
        /// @param windowId: The window ID associated with the listener.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UnregisterRespondingListener(ulong windowId);
		
		/// <summary>
        /// Notify the receiver page is ready for presentation use.
        ///
        /// @param sessionId An ID to identify presentation session.
        /// @param windowId  The inner window ID associated with the presentation
        /// session.
        /// @param isLoading true if receiver page is loading successfully.
        /// @param constructor: The constructor for creating a transport builder.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyReceiverReady([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionId, ulong windowId, [MarshalAs(UnmanagedType.U1)] bool isLoading, [MarshalAs(UnmanagedType.Interface)] nsIPresentationTransportBuilderConstructor constructor);
		
		/// <summary>
        /// Notify the transport is closed
        ///
        /// @param sessionId: An ID to identify presentation session.
        /// @param role: Identify the function called by controller or receiver.
        /// @param reason: the error message. NS_OK indicates it is closed normally.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyTransportClosed([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionId, byte role, int reason);
		
		/// <summary>
        /// Untrack the relevant info about the presentation session if there's any.
        ///
        /// @param sessionId: An ID to identify presentation session.
        /// @param role: Identify the function called by controller or receiver.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UntrackSessionInfo([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionId, byte role);
		
		/// <summary>
        /// The windowId for building RTCDataChannel session transport
        ///
        /// @param sessionId: An ID to identify presentation session.
        /// @param role: Identify the function called by controller or receiver.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetWindowIdBySessionId([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionId, byte role);
		
		/// <summary>
        /// Update the mapping of the session ID and window ID.
        ///
        /// @param sessionId: An ID to identify presentation session.
        /// @param role: Identify the function called by controller or receiver.
        /// @param windowId: The inner window ID associated with the presentation
        /// session.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void UpdateWindowIdBySessionId([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionId, byte role, ulong windowId);
		
		/// <summary>
        /// To build the session transport.
        /// NOTE: This function should be only called at controller side.
        ///
        /// @param sessionId: An ID to identify presentation session.
        /// @param role: Identify the function called by controller or receiver.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BuildTransport([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase sessionId, byte role);
	}
	
	/// <summary>nsIPresentationServiceConsts </summary>
	public class nsIPresentationServiceConsts
	{
		
		// 
		public const ushort ROLE_CONTROLLER = 0x1;
		
		// 
		public const ushort ROLE_RECEIVER = 0x2;
		
		// 
		public const ushort CLOSED_REASON_ERROR = 0x1;
		
		// 
		public const ushort CLOSED_REASON_CLOSED = 0x2;
		
		// 
		public const ushort CLOSED_REASON_WENTAWAY = 0x3;
	}
}
