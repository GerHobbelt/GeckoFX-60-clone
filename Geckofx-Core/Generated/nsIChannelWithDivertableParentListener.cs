// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIChannelWithDivertableParentListener.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///When we are diverting messages from the child to the parent. The
    /// nsHttpChannel and nsFtpChannel must know that there is a ChannelParent to
    /// be able to suspend message delivery if the channel is suspended.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("c073d79f-2503-4dff-ba87-d3071f8b433b")]
	public interface nsIChannelWithDivertableParentListener
	{
		
		/// <summary>
        /// Informs nsHttpChannel or nsFtpChannel that a ParentChannel starts
        /// diverting messages. During this time all suspend/resume calls to the
        /// channel must also suspend the ParentChannel by calling
        /// SuspendMessageDiversion/ResumeMessageDiversion.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void MessageDiversionStarted(/* ADivertableParentChannelPtr */ nsISupports aParentChannel);
		
		/// <summary>
        /// The message diversion has finished the calls to
        /// SuspendMessageDiversion/ResumeMessageDiversion are not necessary anymore.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void MessageDiversionStop();
		
		/// <summary>
        /// Internal versions of Suspend/Resume that suspend (or resume) the channel
        /// but do not suspend the ParentChannel's IPDL message queue.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SuspendInternal();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ResumeInternal();
	}
}
