// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIPushErrorReporter.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("b58249f9-1a04-48cc-bc20-2c992d64c73e")]
	public interface nsIPushErrorReporter
	{
		
		/// <summary>
        /// Reports a `push` event handler error to the Push service. |messageId| is
        /// an opaque string passed to `nsIPushNotifier.notifyPush{WithData}`.
        /// |reason| is a delivery error reason.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ReportDeliveryError([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase messageId, ushort reason);
	}
	
	/// <summary>nsIPushErrorReporterConsts </summary>
	public class nsIPushErrorReporterConsts
	{
		
		// <summary>
        // Ack types, reported when the Push service acknowledges an incoming message.
        //
        // Acks are sent before the message is dispatched to the service worker,
        // since the server delays new messages until all outstanding ones have been
        // acked. |reportDeliveryError| will be called if an error occurs in the
        // worker's `push` event handler after acking the message.
        // </summary>
		public const long ACK_DELIVERED = 0;
		
		// 
		public const long ACK_DECRYPTION_ERROR = 1;
		
		// 
		public const long ACK_NOT_DELIVERED = 2;
		
		// <summary>
        // Unsubscribe reasons, reported when the service drops a subscription.
        // </summary>
		public const long UNSUBSCRIBE_MANUAL = 3;
		
		// 
		public const long UNSUBSCRIBE_QUOTA_EXCEEDED = 4;
		
		// 
		public const long UNSUBSCRIBE_PERMISSION_REVOKED = 5;
		
		// <summary>
        // Delivery error reasons, reported when a service worker fails to handle
        // an incoming push message in its `push` event handler.
        // </summary>
		public const long DELIVERY_UNCAUGHT_EXCEPTION = 6;
		
		// 
		public const long DELIVERY_UNHANDLED_REJECTION = 7;
		
		// 
		public const long DELIVERY_INTERNAL_ERROR = 8;
	}
}
