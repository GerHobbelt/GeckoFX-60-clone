// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsISpeechService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// A callback is implemented by the service.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("c576de0c-8a3d-4570-be7e-9876d3e5bed2")]
	public interface nsISpeechTaskCallback
	{
		
		/// <summary>
        /// The user or application has paused the speech.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnPause();
		
		/// <summary>
        /// The user or application has resumed the speech.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnResume();
		
		/// <summary>
        /// The user or application has canceled the speech.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnCancel();
		
		/// <summary>
        /// The user or application has changed the volume of this speech.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnVolumeChanged(float aVolume);
	}
	
	/// <summary>
    /// A task is associated with a single utterance. It is provided by the browser
    /// to the service in the speak() method.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("ad59949c-2437-4b35-8eeb-d760caab75c5")]
	public interface nsISpeechTask
	{
		
		/// <summary>
        /// Prepare browser for speech.
        ///
        /// @param aCallback callback object for mid-speech operations.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Setup([MarshalAs(UnmanagedType.Interface)] nsISpeechTaskCallback aCallback);
		
		/// <summary>
        /// Dispatch start event.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DispatchStart();
		
		/// <summary>
        /// Dispatch end event.
        ///
        /// @param aElapsedTime time in seconds since speech has started.
        /// @param aCharIndex   offset of spoken characters.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DispatchEnd(float aElapsedTime, uint aCharIndex);
		
		/// <summary>
        /// Dispatch pause event.
        ///
        /// @param aElapsedTime time in seconds since speech has started.
        /// @param aCharIndex   offset of spoken characters.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DispatchPause(float aElapsedTime, uint aCharIndex);
		
		/// <summary>
        /// Dispatch resume event.
        ///
        /// @param aElapsedTime time in seconds since speech has started.
        /// @param aCharIndex   offset of spoken characters.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DispatchResume(float aElapsedTime, uint aCharIndex);
		
		/// <summary>
        /// Dispatch error event.
        ///
        /// @param aElapsedTime time in seconds since speech has started.
        /// @param aCharIndex   offset of spoken characters.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DispatchError(float aElapsedTime, uint aCharIndex);
		
		/// <summary>
        /// Dispatch boundary event.
        ///
        /// @param aName        name of boundary, 'word' or 'sentence'
        /// @param aElapsedTime time in seconds since speech has started.
        /// @param aCharIndex   offset of spoken characters.
        /// @param aCharLength  length of text in boundary event to be spoken.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DispatchBoundary([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aName, float aElapsedTime, uint aCharIndex, uint aCharLength, int argc);
		
		/// <summary>
        /// Dispatch mark event.
        ///
        /// @param aName        mark identifier.
        /// @param aElapsedTime time in seconds since speech has started.
        /// @param aCharIndex   offset of spoken characters.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void DispatchMark([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aName, float aElapsedTime, uint aCharIndex);
	}
	
	/// <summary>
    /// The main interface of a speech synthesis service.
    ///
    /// A service is responsible for outputting audio.
    /// The service dispatches events, starting with dispatchStart() and ending with
    /// dispatchEnd or dispatchError().
    /// A service must also respond with the currect actions and events in response
    /// to implemented callback methods.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("9b7d59db-88ff-43d0-b6ee-9f63d042d08f")]
	public interface nsISpeechService
	{
		
		/// <summary>
        /// Speak the given text using the voice identified byu the given uri. See
        /// W3C Speech API spec for information about pitch and rate.
        /// https://dvcs.w3.org/hg/speech-api/raw-file/tip/speechapi.html#utterance-attributes
        ///
        /// @param aText   text to utter.
        /// @param aUri    unique voice identifier.
        /// @param aVolume volume to speak voice in. Only relevant for indirect audio.
        /// @param aRate   rate to speak voice in.
        /// @param aPitch  pitch to speak voice in.
        /// @param aTask  task instance for utterance, used for sending events or audio
        /// data back to browser.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Speak([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aText, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aUri, float aVolume, float aRate, float aPitch, [MarshalAs(UnmanagedType.Interface)] nsISpeechTask aTask);
	}
}
