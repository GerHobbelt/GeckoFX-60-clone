// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file mozIMozIntl.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// This is a set of APIs that are of general usefulness for user interface
    /// internationalization.
    ///
    /// They're all in various stages of the standardization process through
    /// ECMA402, so they are exposed to privileged content only but are written
    /// in the way to allow for easy migration to standard Intl object once
    /// the appropriate stage of the ECMA402 is achieved.
    ///
    /// The exact structure of the code is a little bit complex because of that:
    ///
    /// 1) The core is in SpiderMonkey together with other Intl APIs
    ///
    /// This allows us to write the code once, stick to the spec language
    /// of the proposal, reuse our ICU bindings in Spidermonkey and use
    /// the code to inform us on refining the spec proposal for the given API itself.
    ///
    /// 2) The MozIntlHelper API exposes the SpiderMonkey APIs
    ///
    /// This helper API allows attaching the new APIs on any regular object.
    ///
    /// 3) The MozIntl API provides the access to those APIs
    ///
    /// This API exposes the actual functionality and wraps around the MozIntlHelper
    /// lazily retrieving and setting the accessors.
    /// On top of that, the API also binds additional functionality like using
    /// current application locale by default, and fetching OS regional preferences
    /// for date time format.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("7f63279a-1a29-4ae6-9e7a-dc9684a23530")]
	public interface mozIMozIntl
	{
		
		/// <summary>
        /// This is a set of APIs that are of general usefulness for user interface
        /// internationalization.
        ///
        /// They're all in various stages of the standardization process through
        /// ECMA402, so they are exposed to privileged content only but are written
        /// in the way to allow for easy migration to standard Intl object once
        /// the appropriate stage of the ECMA402 is achieved.
        ///
        /// The exact structure of the code is a little bit complex because of that:
        ///
        /// 1) The core is in SpiderMonkey together with other Intl APIs
        ///
        /// This allows us to write the code once, stick to the spec language
        /// of the proposal, reuse our ICU bindings in Spidermonkey and use
        /// the code to inform us on refining the spec proposal for the given API itself.
        ///
        /// 2) The MozIntlHelper API exposes the SpiderMonkey APIs
        ///
        /// This helper API allows attaching the new APIs on any regular object.
        ///
        /// 3) The MozIntl API provides the access to those APIs
        ///
        /// This API exposes the actual functionality and wraps around the MozIntlHelper
        /// lazily retrieving and setting the accessors.
        /// On top of that, the API also binds additional functionality like using
        /// current application locale by default, and fetching OS regional preferences
        /// for date time format.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetCalendarInfo(ref Gecko.JsVal locales);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetDisplayNames(ref Gecko.JsVal locales, ref Gecko.JsVal options);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetLocaleInfo(ref Gecko.JsVal locales);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetDateTimeFormatAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetNumberFormatAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetCollatorAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetPluralRulesAttribute();
	}
}
