// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsINetworkInterceptController.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// Interface allowing the nsIInterceptedChannel to callback when it is
    /// done reading from the body stream.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("51039eb6-bea0-40c7-b523-ccab56cc4fde")]
	public interface nsIInterceptedBodyCallback
	{
		
		/// <summary>
        /// Interface allowing the nsIInterceptedChannel to callback when it is
        /// done reading from the body stream.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BodyComplete(int aRv);
	}
	
	/// <summary>
    /// Interface to allow implementors of nsINetworkInterceptController to control the behaviour
    /// of intercepted channels without tying implementation details of the interception to
    /// the actual channel. nsIInterceptedChannel is expected to be implemented by objects
    /// which do not implement nsIChannel.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("f4b82975-6a86-4cc4-87fe-9a1fd430c86d")]
	public interface nsIInterceptedChannel
	{
		
		/// <summary>
        /// Instruct a channel that has been intercepted to continue with the original
        /// network request.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ResetInterception();
		
		/// <summary>
        /// Set the status and reason for the forthcoming synthesized response.
        /// Multiple calls overwrite existing values.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SynthesizeStatus(ushort status, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase reason);
		
		/// <summary>
        /// Attach a header name/value pair to the forthcoming synthesized response.
        /// Overwrites any existing header value.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SynthesizeHeader([MarshalAs(UnmanagedType.LPStruct)] nsACStringBase name, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase value);
		
		/// <summary>
        /// Instruct a channel that has been intercepted that a response is
        /// starting to be synthesized.  No further header modification is allowed
        /// after this point.  There are a few parameters:
        /// - A body stream may be optionally passed.  If nullptr, then an
        /// empty body is assumed.
        /// - A callback may be optionally passed.  It will be invoked
        /// when the body is complete.  For a nullptr body this may be
        /// synchronously on the current thread.  Otherwise it will be invoked
        /// asynchronously on the current thread.
        /// - A cacheInfoChannel may be optionally passed. If the body stream is
        /// from alternative data cache, this cacheInfoChannel provides needed
        /// cache information.
        /// - The caller may optionally pass a spec for a URL that this response
        /// originates from; an empty string will cause the original
        /// intercepted request's URL to be used instead.
        /// - The responseRedirected flag is false will cause the channel do an
        /// internal redirect when the original intercepted reauest's URL is
        /// different from the response's URL. The flag is true will cause the
        /// chaanel do a non-internal redirect when the URLs are different.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StartSynthesizedResponse([MarshalAs(UnmanagedType.Interface)] nsIInputStream body, [MarshalAs(UnmanagedType.Interface)] nsIInterceptedBodyCallback callback, [MarshalAs(UnmanagedType.Interface)] nsICacheInfoChannel channel, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase finalURLSpec, [MarshalAs(UnmanagedType.U1)] bool responseRedirected);
		
		/// <summary>
        /// Instruct a channel that has been intercepted that response synthesis
        /// has completed and all outstanding resources can be closed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void FinishSynthesizedResponse();
		
		/// <summary>
        /// Cancel the pending intercepted request.
        /// @return NS_ERROR_FAILURE if the response has already been synthesized or
        /// the original request has been instructed to continue.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CancelInterception(int status);
		
		/// <summary>
        /// The underlying channel object that was intercepted.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIChannel GetChannelAttribute();
		
		/// <summary>
        /// The URL of the underlying channel object, corrected for a potential
        /// secure upgrade.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIURI GetSecureUpgradedChannelURIAttribute();
		
		/// <summary>
        /// This method allows to override the channel info for the channel.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetChannelInfo(nsISupports channelInfo);
		
		/// <summary>
        /// Get the internal load type from the underlying channel.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.IntPtr GetInternalContentPolicyTypeAttribute();
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
        nsISupports GetConsoleReportCollectorAttribute();
		
		/// <summary>
        /// Save the timestamps of various service worker interception phases.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetLaunchServiceWorkerStart(ulong aTimeStamp);
		
		/// <summary>
        /// A hack to get sw launch start time for telemetry.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetLaunchServiceWorkerStart(ref ulong aTimeStamp);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetLaunchServiceWorkerEnd(ulong aTimeStamp);
		
		/// <summary>
        /// A hack to get sw launch end time for telemetry.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetLaunchServiceWorkerEnd(ref ulong aTimeStamp);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetDispatchFetchEventStart(ulong aTimeStamp);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetDispatchFetchEventEnd(ulong aTimeStamp);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetHandleFetchEventStart(ulong aTimeStamp);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetHandleFetchEventEnd(ulong aTimeStamp);
		
		/// <summary>
        /// |ChannelResetEnd|.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetFinishResponseStart(ulong aTimeStamp);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetFinishSynthesizedResponseEnd(ulong aTimeStamp);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetChannelResetEnd(ulong aTimeStamp);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SaveTimeStamps();
		
		/// <summary>
        /// Allow the ServiceWorkerManager to set an RAII-style object on the
        /// intercepted channel that should be released once the channel is
        /// torn down.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetReleaseHandle([MarshalAs(UnmanagedType.Interface)] nsISupports aHandle);
	}
	
	/// <summary>
    /// Interface to allow consumers to attach themselves to a channel's
    /// notification callbacks/loadgroup and determine if a given channel
    /// request should be intercepted before any network request is initiated.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("70d2b4fe-a552-48cd-8d93-1d8437a56b53")]
	public interface nsINetworkInterceptController
	{
		
		/// <summary>
        /// Returns true if a channel should avoid initiating any network
        /// requests until specifically instructed to do so.
        ///
        /// @param aURI The URI to be loaded.  Note, this may differ from
        /// the channel's current URL in some cases.
        /// @param aChannel The channel that may be intercepted.  It will
        /// be in the state prior to calling OnStartRequest().
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool ShouldPrepareForIntercept([MarshalAs(UnmanagedType.Interface)] nsIURI aURI, [MarshalAs(UnmanagedType.Interface)] nsIChannel aChannel);
		
		/// <summary>
        /// Notification when a given intercepted channel is prepared to accept a synthesized
        /// response via the provided stream.
        ///
        /// @param aChannel the controlling interface for a channel that has been intercepted
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ChannelIntercepted([MarshalAs(UnmanagedType.Interface)] nsIInterceptedChannel aChannel);
	}
}
