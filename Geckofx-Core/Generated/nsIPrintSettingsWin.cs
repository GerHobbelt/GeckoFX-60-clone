// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIPrintSettingsWin.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// Simplified PrintSettings for Windows interface
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("c63eed41-6ac5-459e-8a64-033eb9ad770a")]
	public interface nsIPrintSettingsWin
	{
		
		/// <summary>
        /// Data Members
        ///
        /// Each of these data members make a copy
        /// of the contents. If you get the value,
        /// you own the memory.
        ///
        /// The following three pieces of data are needed
        /// to create a DC for printing. These are typcially
        /// gotten via the PrintDLG call ro can be obtained
        /// via the "m_pd" data member of the CPrintDialog
        /// in MFC.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetDeviceNameAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aDeviceName);
		
		/// <summary>
        /// Data Members
        ///
        /// Each of these data members make a copy
        /// of the contents. If you get the value,
        /// you own the memory.
        ///
        /// The following three pieces of data are needed
        /// to create a DC for printing. These are typcially
        /// gotten via the PrintDLG call ro can be obtained
        /// via the "m_pd" data member of the CPrintDialog
        /// in MFC.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetDeviceNameAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aDeviceName);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetDriverNameAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aDriverName);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetDriverNameAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aDriverName);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.IntPtr GetDevModeAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetDevModeAttribute(System.IntPtr aDevMode);
		
		/// <summary>
        /// On Windows we use the printable width and height for the printing surface.
        /// We don't want to have to create native print device contexts in the content
        /// process, so we need to store these in the settings.
        /// Storing in Inches is most convenient as they are retrieved from the device
        /// using fields which are in pixels and pixels per inch.
        /// Note these are stored in portrait format to ensure that we can take account
        /// of our own changes to the orientation print setting.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetPrintableWidthInInchesAttribute();
		
		/// <summary>
        /// On Windows we use the printable width and height for the printing surface.
        /// We don't want to have to create native print device contexts in the content
        /// process, so we need to store these in the settings.
        /// Storing in Inches is most convenient as they are retrieved from the device
        /// using fields which are in pixels and pixels per inch.
        /// Note these are stored in portrait format to ensure that we can take account
        /// of our own changes to the orientation print setting.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetPrintableWidthInInchesAttribute(double aPrintableWidthInInches);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		double GetPrintableHeightInInchesAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetPrintableHeightInInchesAttribute(double aPrintableHeightInInches);
		
		/// <summary>
        /// Copy relevant print settings from native Windows device.
        ///
        /// @param hdc HDC to copy from
        /// @param devMode DEVMODE to copy from
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CopyFromNative(nsISupports hdc, System.IntPtr devMode);
		
		/// <summary>
        /// Copy relevant print settings to native windows structures.
        ///
        /// @param devMode DEVMODE to be populated.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void CopyToNative(System.IntPtr devMode);
	}
}
