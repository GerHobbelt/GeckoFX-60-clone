// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file amIAddonManagerStartup.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("01dfa47b-87e4-4135-877b-586d033e1b5d")]
	public interface amIAddonManagerStartup
	{
		
		/// <summary>
        /// Reads and parses startup data from the addonState.json.lz4 file, checks
        /// for modifications, and returns the result.
        ///
        /// Returns null for an empty or nonexistent state file, but throws for an
        /// invalid one.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal ReadStartupData(System.IntPtr jsContext);
		
		/// <summary>
        /// Initializes the chrome registry for the enabled, non-restartless add-on
        /// in the given state data.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InitializeExtensions(ref Gecko.JsVal locations, System.IntPtr jsContext);
		
		/// <summary>
        /// Registers a set of dynamic chrome registry entries, and returns an object
        /// with a `destruct()` method which must be called in order to unregister
        /// the entries.
        ///
        /// @param manifestURI The base manifest URI for the entries. URL values are
        /// resolved relative to this URI.
        /// @param entries An array of arrays, each containing a registry entry as it
        /// would appar in a chrome.manifest file. Only the following entry
        /// types are currently accepted:
        ///
        /// - "locale" A locale package entry. Must be a 4-element array.
        /// - "override" A URL override entry. Must be a 3-element array.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIJSRAIIHelper RegisterChrome([MarshalAs(UnmanagedType.Interface)] nsIURI manifestURI, ref Gecko.JsVal entries, System.IntPtr jsContext);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal EncodeBlob(ref Gecko.JsVal value, System.IntPtr jsContext);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal DecodeBlob(ref Gecko.JsVal value, System.IntPtr jsContext);
		
		/// <summary>
        /// Enumerates over all entries in the given zip file matching the given
        /// pattern, and returns an array of their paths.
        ///
        /// This should be used in preference to manually opening or retrieving a
        /// ZipReader from the zip cache, since the former causes main thread IO and
        /// the latter can lead to file locking issues due to unpredictable GC behavior
        /// keeping the cached ZipReader alive after the cache is flushed.
        ///
        /// @param file The zip file to enumerate.
        /// @param pattern The pattern to match, as passed to nsIZipReader.findEntries.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void EnumerateZipFile([MarshalAs(UnmanagedType.Interface)] nsIFile file, [MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase pattern, ref uint count, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] ref System.IntPtr[] entries);
		
		/// <summary>
        /// Resets the internal state of the startup service, and allows
        /// initializeExtensions() to be called again. Does *not* fully unregister
        /// chrome registry locations for previously registered add-ons.
        ///
        /// NOT FOR USE OUTSIDE OF UNIT TESTS.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Reset();
		
		/// <summary>
        /// Initializes the URL Preloader.
        ///
        /// NOT FOR USE OUTSIDE OF UNIT TESTS.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InitializeURLPreloader();
	}
}
