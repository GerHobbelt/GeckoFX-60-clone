// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsPIWindowWatcher.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///Private "control" methods on the Window Watcher. These are annoying
    ///   bookkeeping methods, not part of the public (embedding) interface. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("d162f9c4-19d5-4723-931f-f1e51bfa9f68")]
	public interface nsPIWindowWatcher
	{
		
		/// <summary>
        ///A window has been created. Add it to our list.
        ///      @param aWindow the window to add
        ///      @param aChrome the corresponding chrome window. The DOM window
        ///                     and chrome will be mapped together, and the corresponding
        ///                     chrome can be retrieved using the (not private)
        ///                     method getChromeForWindow. If null, any extant mapping
        ///                     will be cleared.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void AddWindow(mozIDOMWindowProxy aWindow, [MarshalAs(UnmanagedType.Interface)] nsIWebBrowserChrome aChrome);
		
		/// <summary>
        ///A window has been closed. Remove it from our list.
        ///      @param aWindow the window to remove
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void RemoveWindow(mozIDOMWindowProxy aWindow);
		
		/// <summary>
        ///Like the public interface's open(), but can handle openDialog-style
        ///      arguments and calls which shouldn't result in us navigating the window.
        ///      @param aParent parent window, if any. Null if no parent.  If it is
        ///             impossible to get to an nsIWebBrowserChrome from aParent, this
        ///             method will effectively act as if aParent were null.
        ///      @param aURL url to which to open the new window. Must already be
        ///             escaped, if applicable. can be null.
        ///      @param aName window name from JS window.open. can be null.  If a window
        ///             with this name already exists, the openWindow call may just load
        ///             aUrl in it (if aUrl is not null) and return it.
        ///      @param aFeatures window features from JS window.open. can be null.
        ///      @param aCalledFromScript true if we were called from script.
        ///      @param aDialog use dialog defaults (see nsIDOMWindow::openDialog)
        ///      @param aNavigate true if we should navigate the new window to the
        ///             specified URL.
        ///      @param aArgs Window argument
        ///      @param aIsPopupSpam true if the window is a popup spam window; used for
        ///                          popup blocker internals.
        ///      @param aForceNoOpener If true, force noopener behavior.  This means not
        ///                            looking for existing windows with the given name,
        ///                            not setting an opener on the newly opened window,
        ///                            and returning null from this method.
        ///      @param aLoadInfo if aNavigate is true, this allows the caller to pass in
        ///                       an nsIDocShellLoadInfo to use for the navigation.
        ///                       Callers can pass in null if they want the windowwatcher
        ///                       to just construct a loadinfo itself.  If aNavigate is
        ///                       false, this argument is ignored.
        ///      @return the new window
        ///      @note This method may examine the JS context stack for purposes of
        ///            determining the security context to use for the search for a given
        ///            window named aName.
        ///      @note This method should try to set the default charset for the new
        ///            window to the default charset of the document in the calling window
        ///            (which is determined based on the JS stack and the value of
        ///            aParent).  This is not guaranteed, however.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		mozIDOMWindowProxy OpenWindow2(mozIDOMWindowProxy aParent, [MarshalAs(UnmanagedType.LPStr)] string aUrl, [MarshalAs(UnmanagedType.LPStr)] string aName, [MarshalAs(UnmanagedType.LPStr)] string aFeatures, [MarshalAs(UnmanagedType.U1)] bool aCalledFromScript, [MarshalAs(UnmanagedType.U1)] bool aDialog, [MarshalAs(UnmanagedType.U1)] bool aNavigate, [MarshalAs(UnmanagedType.Interface)] nsISupports aArgs, [MarshalAs(UnmanagedType.U1)] bool aIsPopupSpam, [MarshalAs(UnmanagedType.U1)] bool aForceNoOpener, [MarshalAs(UnmanagedType.Interface)] nsIDocShellLoadInfo aLoadInfo);
		
		/// <summary>
        /// Opens a new window so that the window that aOpeningTab belongs to
        /// is set as the parent window. The newly opened window will also
        /// inherit load context information from aOpeningTab.
        ///
        /// @param aOpeningTab
        /// The nsITabParent that is requesting the new window be opened.
        /// @param aFeatures
        /// Window features if called with window.open or similar.
        /// @param aCalledFromJS
        /// True if called via window.open or similar.
        /// @param aOpenerFullZoom
        /// The current zoom multiplier for the opener tab. This is then
        /// applied to the newly opened window.
        /// @param aNextTabParentId
        /// The integer ID for the next tab parent actor.
        /// 0 means there is no next tab parent actor to use.
        /// @param aForceNoOpener
        /// If true, then aOpeningTab will not be used to set the opener
        /// for the newly created window.
        ///
        /// @return the nsITabParent of the initial browser for the newly opened
        /// window.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsITabParent OpenWindowWithTabParent([MarshalAs(UnmanagedType.Interface)] nsITabParent aOpeningTab, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aFeatures, [MarshalAs(UnmanagedType.U1)] bool aCalledFromJS, float aOpenerFullZoom, ulong aNextTabParentId, [MarshalAs(UnmanagedType.U1)] bool aForceNoOpener);
		
		/// <summary>
        /// Find a named docshell tree item amongst all windows registered
        /// with the window watcher.  This may be a subframe in some window,
        /// for example.
        ///
        /// @param aName the name of the window.  Must not be null.
        /// @param aRequestor the tree item immediately making the request.
        /// We should make sure to not recurse down into its findItemWithName
        /// method.
        /// @param aOriginalRequestor the original treeitem that made the request.
        /// Used for security checks.
        /// @return the tree item with aName as the name, or null if there
        /// isn't one.  "Special" names, like _self, _top, etc, will be
        /// treated specially only if aRequestor is null; in that case they
        /// will be resolved relative to the first window the windowwatcher
        /// knows about.
        /// @see findItemWithName methods on nsIDocShellTreeItem and
        /// nsIDocShellTreeOwner
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDocShellTreeItem FindItemWithName([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aName, [MarshalAs(UnmanagedType.Interface)] nsIDocShellTreeItem aRequestor, [MarshalAs(UnmanagedType.Interface)] nsIDocShellTreeItem aOriginalRequestor);
	}
}
