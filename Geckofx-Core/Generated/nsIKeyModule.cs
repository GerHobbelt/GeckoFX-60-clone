// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIKeyModule.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// An opaque key object.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("ee2dc516-ba7b-4e77-89fe-c43b886ef715")]
	public interface nsIKeyObject
	{
		
		/// <summary>
        /// for freeing the key memory when destroyed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void InitKey(short aAlgorithm, nsISupports aKey);
		
		/// <summary>
        /// Returns a pointer to the underlying key object.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
        nsISupports GetKeyObj();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		short GetType();
	}
	
	/// <summary>nsIKeyObjectConsts </summary>
	public class nsIKeyObjectConsts
	{
		
		// <summary>
        // Key types
        // </summary>
		public const short SYM_KEY = 1;
		
		// <summary>
        // Algorithm types
        // </summary>
		public const short HMAC = 257;
	}
	
	/// <summary>nsIKeyObjectFactory </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("838bdbf1-8244-448f-8bcd-cede70227d75")]
	public interface nsIKeyObjectFactory
	{
		
		/// <summary>Member KeyFromString </summary>
		/// <param name='aAlgorithm'> </param>
		/// <param name='aKey'> </param>
		/// <returns>A nsIKeyObject</returns>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIKeyObject KeyFromString(short aAlgorithm, [MarshalAs(UnmanagedType.LPStruct)] nsACStringBase aKey);
	}
}
