// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsISerialEventTarget.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// A serial event target is an event dispatching interface like
    /// nsIEventTarget. Runnables dispatched to an nsISerialEventTarget are required
    /// to execute serially. That is, two different runnables dispatched to the
    /// target should never be allowed to execute simultaneously. One exception to
    /// this rule is nested event loops. If a runnable spins a nested event loop,
    /// causing another runnable dispatched to the target to run, the target may
    /// still be considered "serial".
    ///
    /// Examples:
    /// - nsIThread is a serial event target.
    /// - Thread pools are not serial event targets.
    /// - However, one can "convert" a thread pool into an nsISerialEventTarget
    /// by putting a TaskQueue in front of it.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("9f982380-24b4-49f3-88f6-45e2952036c7")]
	public interface nsISerialEventTarget : nsIEventTarget
	{
		
		/// <summary>
        /// for XPConnect purposes.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool IsOnCurrentThreadInfallible();
		
		/// <summary>
        /// Fallible version of IsOnCurrentThread.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new bool IsOnCurrentThread();
		
		/// <summary>
        /// Dispatch an event to this event target.  This function may be called from
        /// any thread, and it may be called re-entrantly.
        ///
        /// @param event
        /// The alreadyAddRefed<> event to dispatch.
        /// NOTE that the event will be leaked if it fails to dispatch.
        /// @param flags
        /// The flags modifying event dispatch.  The flags are described in detail
        /// below.
        ///
        /// @throws NS_ERROR_INVALID_ARG
        /// Indicates that event is null.
        /// @throws NS_ERROR_UNEXPECTED
        /// Indicates that the thread is shutting down and has finished processing
        /// events, so this event would never run and has not been dispatched.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void DispatchFromC(System.IntPtr @event, uint flags);
		
		/// <summary>
        /// Version of Dispatch to expose to JS, which doesn't require an alreadyAddRefed<>
        /// (it will be converted to that internally)
        ///
        /// @param event
        /// The (raw) event to dispatch.
        /// @param flags
        /// The flags modifying event dispatch.  The flags are described in detail
        /// below.
        ///
        /// @throws NS_ERROR_INVALID_ARG
        /// Indicates that event is null.
        /// @throws NS_ERROR_UNEXPECTED
        /// Indicates that the thread is shutting down and has finished processing
        /// events, so this event would never run and has not been dispatched.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void Dispatch([MarshalAs(UnmanagedType.Interface)] nsIRunnable @event, uint flags);
		
		/// <summary>
        /// Dispatch an event to this event target, but do not run it before delay
        /// milliseconds have passed.  This function may be called from any thread.
        ///
        /// @param event
        /// The alreadyAddrefed<> event to dispatch.
        /// @param delay
        /// The delay (in ms) before running the event.  If event does not rise to
        /// the top of the event queue before the delay has passed, it will be set
        /// aside to execute once the delay has passed.  Otherwise, it will be
        /// executed immediately.
        ///
        /// @throws NS_ERROR_INVALID_ARG
        /// Indicates that event is null.
        /// @throws NS_ERROR_UNEXPECTED
        /// Indicates that the thread is shutting down and has finished processing
        /// events, so this event would never run and has not been dispatched, or
        /// that delay is zero.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		new void DelayedDispatch(System.IntPtr @event, uint delay);
	}
}
