// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIPushService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// A push subscription, passed as an argument to a subscription callback.
    /// Similar to the `PushSubscription` WebIDL interface.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("1de32d5c-ea88-4c9e-9626-b032bd87f415")]
	public interface nsIPushSubscription
	{
		
		/// <summary>
        /// A push subscription, passed as an argument to a subscription callback.
        /// Similar to the `PushSubscription` WebIDL interface.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetEndpointAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aEndpoint);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		long GetPushCountAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		long GetLastPushAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetQuotaAttribute();
		
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIsSystemSubscriptionAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetP256dhPrivateKeyAttribute();
		
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool QuotaApplies();
		
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsExpired();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetKey([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase name, ref uint keyLen, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] ref byte[] key);
	}
	
	/// <summary>
    /// Called by methods that return a push subscription. A non-success
    /// |status| indicates that there was a problem returning the
    /// subscription, and the |subscription| argument should be ignored. Otherwise,
    /// |subscription| will point to a valid push subscription, or |null| if the
    /// subscription does not exist.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("1799c074-9d52-46b0-ab3c-c09790732f6f")]
	public interface nsIPushSubscriptionCallback
	{
		
		/// <summary>
        /// Called by methods that return a push subscription. A non-success
        /// |status| indicates that there was a problem returning the
        /// subscription, and the |subscription| argument should be ignored. Otherwise,
        /// |subscription| will point to a valid push subscription, or |null| if the
        /// subscription does not exist.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnPushSubscription(int status, [MarshalAs(UnmanagedType.Interface)] nsIPushSubscription subscription);
	}
	
	/// <summary>
    /// Called by |unsubscribe|. A non-success |status| indicates that there was
    /// a problem unsubscribing, and the |success| argument should be ignored.
    /// Otherwise, |success| is true if unsubscribing was successful, and false if
    /// the subscription does not exist.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("d574118f-61a9-4270-b1f6-4461aa85c4f5")]
	public interface nsIUnsubscribeResultCallback
	{
		
		/// <summary>
        /// Called by |unsubscribe|. A non-success |status| indicates that there was
        /// a problem unsubscribing, and the |success| argument should be ignored.
        /// Otherwise, |success| is true if unsubscribing was successful, and false if
        /// the subscription does not exist.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnUnsubscribe(int status, [MarshalAs(UnmanagedType.U1)] bool success);
	}
	
	/// <summary>
    /// Called by |clearForDomain|. A non-success |status| indicates that there was
    /// a problem clearing subscriptions for the given domain.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("bd47b38e-8bfa-4f92-834e-832a4431e05e")]
	public interface nsIPushClearResultCallback
	{
		
		/// <summary>
        /// Called by |clearForDomain|. A non-success |status| indicates that there was
        /// a problem clearing subscriptions for the given domain.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnClear(int status);
	}
	
	/// <summary>
    /// A service for components to subscribe and receive push messages from web
    /// services. This functionality is exposed to content via the Push DOM API,
    /// which uses service workers. This interface exists to support the DOM API,
    /// and allows privileged code to receive messages without migrating to service
    /// workers.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("678ef584-bf25-47aa-ac84-03efc0865b68")]
	public interface nsIPushService
	{
		
		/// <summary>
        ///Observer topic names, exported for convenience. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetPushTopicAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aPushTopic);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetSubscriptionChangeTopicAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aSubscriptionChangeTopic);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetSubscriptionModifiedTopicAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aSubscriptionModifiedTopic);
		
		/// <summary>
        /// Creates a push subscription for the given |scope| URL and |principal|.
        /// If a subscription already exists for this |(scope, principal)| pair,
        /// the callback will receive the existing record as the second argument.
        ///
        /// The |endpoint| property of the subscription record is a URL string
        /// that can be used to send push messages to subscribers.
        ///
        /// Each incoming message fires a `push-message` observer notification, with
        /// an `nsIPushMessage` as the subject and the |scope| as the data.
        ///
        /// If the server drops a subscription, a `push-subscription-change` observer
        /// will be fired, with the subject set to |principal| and the data set to
        /// |scope|. Servers may drop subscriptions at any time, so callers should
        /// recreate subscriptions if desired.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Subscribe([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase scope, [MarshalAs(UnmanagedType.Interface)] nsIPrincipal principal, [MarshalAs(UnmanagedType.Interface)] nsIPushSubscriptionCallback callback);
		
		/// <summary>
        /// Creates a restricted push subscription with the given public |key|. The
        /// application server must use the corresponding private key to authenticate
        /// message delivery requests, as described in draft-thomson-webpush-vapid.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SubscribeWithKey([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase scope, [MarshalAs(UnmanagedType.Interface)] nsIPrincipal principal, uint keyLength, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] byte[] key, [MarshalAs(UnmanagedType.Interface)] nsIPushSubscriptionCallback callback);
		
		/// <summary>
        /// Removes a push subscription for the given |scope|.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Unsubscribe([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase scope, [MarshalAs(UnmanagedType.Interface)] nsIPrincipal principal, [MarshalAs(UnmanagedType.Interface)] nsIUnsubscribeResultCallback callback);
		
		/// <summary>
        /// Retrieves the subscription record associated with the given
        /// |(scope, principal)| pair. If the subscription does not exist, the
        /// callback will receive |null| as the second argument.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetSubscription([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase scope, [MarshalAs(UnmanagedType.Interface)] nsIPrincipal principal, [MarshalAs(UnmanagedType.Interface)] nsIPushSubscriptionCallback callback);
		
		/// <summary>
        /// Drops every subscription for the given |domain|, or all domains if
        /// |domain| is "*".
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ClearForDomain([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase domain, [MarshalAs(UnmanagedType.Interface)] nsIPushClearResultCallback callback);
	}
	
	/// <summary>nsIPushQuotaManager </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("a2555e70-46f8-4b52-bf02-d978b979d143")]
	public interface nsIPushQuotaManager
	{
		
		/// <summary>
        /// Informs the quota manager that a notification
        /// for the given origin has been shown. Used to
        /// determine if push quota should be relaxed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotificationForOriginShown([MarshalAs(UnmanagedType.LPStr)] string origin);
		
		/// <summary>
        /// Informs the quota manager that a notification
        /// for the given origin has been closed. Used to
        /// determine if push quota should be relaxed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotificationForOriginClosed([MarshalAs(UnmanagedType.LPStr)] string origin);
	}
}
