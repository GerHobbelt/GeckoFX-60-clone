// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIPresentationSessionTransportBuilder.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this file,
    /// You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("673f6de1-e253-41b8-9be8-b7ff161fa8dc")]
	public interface nsIPresentationSessionTransportBuilderListener
	{
		
		/// <summary>
        /// Should set |transport.callback| in |onSessionTransport|.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnSessionTransport([MarshalAs(UnmanagedType.Interface)] nsIPresentationSessionTransport transport);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnError(int reason);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendOffer([MarshalAs(UnmanagedType.Interface)] nsIPresentationChannelDescription offer);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendAnswer([MarshalAs(UnmanagedType.Interface)] nsIPresentationChannelDescription answer);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SendIceCandidate([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase candidate);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Close(int reason);
	}
	
	/// <summary>nsIPresentationSessionTransportBuilder </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("2fdbe67d-80f9-48dc-8237-5bef8fa19801")]
	public interface nsIPresentationSessionTransportBuilder
	{
	}
	
	/// <summary>
    /// The constructor for creating a transport builder.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("706482b2-1b51-4bed-a21d-785a9cfcfac7")]
	public interface nsIPresentationTransportBuilderConstructor
	{
		
		/// <summary>
        /// The constructor for creating a transport builder.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPresentationSessionTransportBuilder CreateTransportBuilder(byte type);
	}
	
	/// <summary>
    /// Builder for TCP session transport
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("cde36d6e-f471-4262-a70d-f932a26b21d9")]
	public interface nsIPresentationTCPSessionTransportBuilder : nsIPresentationSessionTransportBuilder
	{
		
		/// <summary>
        /// The following creation functions will trigger |listener.onSessionTransport|
        /// if the session transport is successfully built, |listener.onError| if some
        /// error occurs during building session transport.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BuildTCPSenderTransport([MarshalAs(UnmanagedType.Interface)] nsISocketTransport aTransport, [MarshalAs(UnmanagedType.Interface)] nsIPresentationSessionTransportBuilderListener aListener);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BuildTCPReceiverTransport([MarshalAs(UnmanagedType.Interface)] nsIPresentationChannelDescription aDescription, [MarshalAs(UnmanagedType.Interface)] nsIPresentationSessionTransportBuilderListener aListener);
	}
	
	/// <summary>
    /// Builder for WebRTC data channel session transport
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("8131c4e0-3a8c-4bc1-a92a-8431473d2fe8")]
	public interface nsIPresentationDataChannelSessionTransportBuilder : nsIPresentationSessionTransportBuilder
	{
		
		/// <summary>
        /// The following creation function will trigger |listener.onSessionTransport|
        /// if the session transport is successfully built, |listener.onError| if some
        /// error occurs during creating session transport. The |notifyConnected| of
        /// |aControlChannel| should be called before calling
        /// |buildDataChannelTransport|.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void BuildDataChannelTransport(byte aRole, mozIDOMWindow aWindow, [MarshalAs(UnmanagedType.Interface)] nsIPresentationSessionTransportBuilderListener aListener);
		
		/// <summary>
        /// Bug 1275150 - Merge TCP builder with the following APIs
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnOffer([MarshalAs(UnmanagedType.Interface)] nsIPresentationChannelDescription offer);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnAnswer([MarshalAs(UnmanagedType.Interface)] nsIPresentationChannelDescription answer);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnIceCandidate([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase candidate);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NotifyDisconnected(int reason);
	}
}
