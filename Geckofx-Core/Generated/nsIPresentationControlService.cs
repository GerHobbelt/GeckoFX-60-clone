// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIPresentationControlService.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// The device information required for establishing control channel.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("296fd171-e4d0-4de0-99ff-ad8ed52ddef3")]
	public interface nsITCPDeviceInfo
	{
		
		/// <summary>
        /// The device information required for establishing control channel.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetIdAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aId);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetAddressAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aAddress);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetPortAttribute();
		
		/// <summary>
        /// server doesn't support TLS or not available.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetCertFingerprintAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aCertFingerprint);
	}
	
	/// <summary>nsIPresentationControlServerListener </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("09bddfaf-fcc2-4dc9-b33e-a509a1c2fb6d")]
	public interface nsIPresentationControlServerListener
	{
		
		/// <summary>
        /// Callback while the server is ready or restarted.
        /// @param   aPort
        /// The port of the server socket.
        /// @param   aCertFingerprint
        /// The SHA-256 fingerprint of TLS server certificate.
        /// Empty string represents server started without encryption.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnServerReady(ushort aPort, [MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aCertFingerprint);
		
		/// <summary>
        /// Callback while the server is stopped or fails to start.
        /// @param   aResult
        /// The error cause of server stopped or the reason of
        /// start failure.
        /// NS_OK means the server is stopped by close.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnServerStopped(int aResult);
		
		/// <summary>
        /// Callback while the remote host is requesting to start a presentation session.
        /// @param aDeviceInfo The device information related to the remote host.
        /// @param aUrl The URL requested to open by remote device.
        /// @param aPresentationId The Id for representing this session.
        /// @param aControlChannel The control channel for this session.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnSessionRequest([MarshalAs(UnmanagedType.Interface)] nsITCPDeviceInfo aDeviceInfo, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aUrl, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aPresentationId, [MarshalAs(UnmanagedType.Interface)] nsIPresentationControlChannel aControlChannel);
		
		/// <summary>
        /// Callback while the remote host is requesting to terminate a presentation session.
        /// @param aDeviceInfo The device information related to the remote host.
        /// @param aPresentationId The Id for representing this session.
        /// @param aControlChannel The control channel for this session.
        /// @param aIsFromReceiver true if termination is initiated by receiver.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnTerminateRequest([MarshalAs(UnmanagedType.Interface)] nsITCPDeviceInfo aDeviceInfo, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aPresentationId, [MarshalAs(UnmanagedType.Interface)] nsIPresentationControlChannel aControlChannel, [MarshalAs(UnmanagedType.U1)] bool aIsFromReceiver);
		
		/// <summary>
        /// Callback while the remote host is requesting to reconnect a presentation session.
        /// @param aDeviceInfo The device information related to the remote host.
        /// @param aUrl The URL requested to open by remote device.
        /// @param aPresentationId The Id for representing this session.
        /// @param aControlChannel The control channel for this session.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void OnReconnectRequest([MarshalAs(UnmanagedType.Interface)] nsITCPDeviceInfo aDeviceInfo, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase url, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aPresentationId, [MarshalAs(UnmanagedType.Interface)] nsIPresentationControlChannel aControlChannel);
	}
	
	/// <summary>
    /// Presentation control service which can be used for both presentation
    /// control client and server.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("55d6b605-2389-4aae-a8fe-60d4440540ea")]
	public interface nsIPresentationControlService
	{
		
		/// <summary>
        /// This method initializes server socket. Caller should set listener and
        /// monitor onServerReady event to get the correct server info.
        /// @param   aEncrypted
        /// True for using TLS control channel.
        /// @param   aPort
        /// The port of the server socket.  Pass 0 or opt-out to indicate no
        /// preference, and a port will be selected automatically.
        /// @throws  NS_ERROR_FAILURE if the server socket has been inited or the
        /// server socket can not be inited.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StartServer([MarshalAs(UnmanagedType.U1)] bool aEncrypted, ushort aPort);
		
		/// <summary>
        /// Request connection to designated remote presentation control receiver.
        /// @param   aDeviceInfo
        /// The remtoe device info for establish connection.
        /// @returns The control channel for this session.
        /// @throws  NS_ERROR_FAILURE if the Id hasn't been inited.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPresentationControlChannel Connect([MarshalAs(UnmanagedType.Interface)] nsITCPDeviceInfo aDeviceInfo);
		
		/// <summary>
        /// Check the compatibility to remote presentation control server.
        /// @param  aVersion
        /// The version of remote server.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsCompatibleServer(uint aVersion);
		
		/// <summary>
        /// Close server socket and call |listener.onClose(NS_OK)|
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Close();
		
		/// <summary>
        /// Get the listen port of the TCP socket, valid after the server is ready.
        /// 0 indicates the server socket is not ready or is closed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ushort GetPortAttribute();
		
		/// <summary>
        /// The protocol version implemented by this server.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetVersionAttribute();
		
		/// <summary>
        /// The id of the TCP presentation server. |requestSession| won't
        /// work until the |id| is set.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetIdAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aId);
		
		/// <summary>
        /// The id of the TCP presentation server. |requestSession| won't
        /// work until the |id| is set.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetIdAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aId);
		
		/// <summary>
        /// The fingerprint of the TLS server certificate.
        /// Empty string indicates the server is not ready or not encrypted.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetCertFingerprintAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aCertFingerprint);
		
		/// <summary>
        /// The fingerprint of the TLS server certificate.
        /// Empty string indicates the server is not ready or not encrypted.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetCertFingerprintAttribute([MarshalAs(UnmanagedType.LPStruct)] nsAUTF8StringBase aCertFingerprint);
		
		/// <summary>
        /// The listener for handling events of this presentation control server.
        /// Listener must be provided before invoke |startServer| and |close|.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPresentationControlServerListener GetListenerAttribute();
		
		/// <summary>
        /// The listener for handling events of this presentation control server.
        /// Listener must be provided before invoke |startServer| and |close|.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetListenerAttribute([MarshalAs(UnmanagedType.Interface)] nsIPresentationControlServerListener aListener);
	}
}
