// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsISocketFilter.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// Filters are created and run on the parent, and filter all packets, both
    /// ingoing and outgoing. The child must specify the name of a recognized filter
    /// in order to create a socket.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("afe2c40c-b9b9-4207-b898-e5cde18c6139")]
	public interface nsISocketFilter
	{
		
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool FilterPacket(System.IntPtr remote_addr, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] byte[] data, uint len, int direction);
	}
	
	/// <summary>nsISocketFilterConsts </summary>
	public class nsISocketFilterConsts
	{
		
		// <summary>
        // Filters are created and run on the parent, and filter all packets, both
        // ingoing and outgoing. The child must specify the name of a recognized filter
        // in order to create a socket.
        // </summary>
		public const long SF_INCOMING = 0;
		
		// 
		public const long SF_OUTGOING = 1;
	}
	
	/// <summary>
    /// Factory of a specified filter.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("81ee76c6-4753-4125-9c8c-290ed9ba62fb")]
	public interface nsISocketFilterHandler
	{
		
		/// <summary>
        /// Factory of a specified filter.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsISocketFilter NewFilter();
	}
}
