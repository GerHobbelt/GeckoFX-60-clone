// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIBrowserDOMWindow.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("e774db14-79ac-4156-a7a3-aa3fd0a22c10")]
	public interface nsIOpenURIInFrameParams
	{
		
		/// <summary>
        ///This Source Code Form is subject to the terms of the Mozilla Public
        /// License, v. 2.0. If a copy of the MPL was not distributed with this
        /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetReferrerAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aReferrer);
		
		/// <summary>
        ///This Source Code Form is subject to the terms of the Mozilla Public
        /// License, v. 2.0. If a copy of the MPL was not distributed with this
        /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetReferrerAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aReferrer);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		uint GetReferrerPolicyAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetReferrerPolicyAttribute(uint aReferrerPolicy);
		
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetIsPrivateAttribute();
		
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIPrincipal GetTriggeringPrincipalAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetTriggeringPrincipalAttribute([MarshalAs(UnmanagedType.Interface)] nsIPrincipal aTriggeringPrincipal);
		
		/// <summary>
        /// opener window in the content process. May be null.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.IntPtr GetOpenerBrowserAttribute();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		Gecko.JsVal GetOpenerAttribute(System.IntPtr jsContext);
	}
	
	/// <summary>
    /// The C++ source has access to the browser script source through
    /// nsIBrowserDOMWindow. It is intended to be attached to the chrome DOMWindow
    /// of a toplevel browser window (a XUL window). A DOMWindow that does not
    /// happen to be a browser chrome window will simply have no access to any such
    /// interface.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("2a9bb880-5d73-40f3-8152-c60c8d137a14")]
	public interface nsIBrowserDOMWindow
	{
		
		/// <summary>
        /// Create the content window for the given URI.
        /// @param aURI the URI to be opened in the window (can be null).
        /// @param aWhere see possible values described above.
        /// @param aOpener window requesting the creation (can be null).
        /// @param aFlags flags which control the behavior of the load. The
        /// OPEN_EXTERNAL/OPEN_NEW flag is only used when
        /// aWhere == OPEN_DEFAULTWINDOW.
        /// @param aTriggeringPrincipal the principal that would trigger the potential
        /// load of aURI.
        /// @return the window into which the URI would have been opened.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		mozIDOMWindowProxy CreateContentWindow([MarshalAs(UnmanagedType.Interface)] nsIURI aURI, mozIDOMWindowProxy aOpener, short aWhere, int aFlags, [MarshalAs(UnmanagedType.Interface)] nsIPrincipal aTriggeringPrincipal);
		
		/// <summary>
        /// As above, but return the nsIFrameLoaderOwner for the new window.
        ///
        /// Additional Parameters:
        /// @param aNextTabParentId The TabParent to associate the window with.
        /// @param aName The name to give the window opened in the new tab.
        /// @return The nsIFrameLoaderOwner for the newly opened window.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.IntPtr CreateContentWindowInFrame([MarshalAs(UnmanagedType.Interface)] nsIURI aURI, [MarshalAs(UnmanagedType.Interface)] nsIOpenURIInFrameParams @params, short aWhere, int aFlags, ulong aNextTabParentId, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aName);
		
		/// <summary>
        /// Load a URI.
        /// @param aURI the URI to open. null is not allowed. To create the window
        /// without loading the URI, use createContentWindow instead.
        /// @param aWhere see possible values described above.
        /// @param aOpener window requesting the open (can be null).
        /// @param aFlags flags which control the behavior of the load. The
        /// OPEN_EXTERNAL/OPEN_NEW flag is only used when
        /// aWhere == OPEN_DEFAULTWINDOW.
        /// @param aTriggeringPrincipal the principal that triggered the load of aURI.
        /// @return the window into which the URI was opened.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		mozIDOMWindowProxy OpenURI([MarshalAs(UnmanagedType.Interface)] nsIURI aURI, mozIDOMWindowProxy aOpener, short aWhere, int aFlags, [MarshalAs(UnmanagedType.Interface)] nsIPrincipal aTriggeringPrincipal);
		
		/// <summary>
        /// As above, but return the nsIFrameLoaderOwner for the new window.
        ///
        /// Additional Parameters:
        /// @param aNextTabParentId The TabParent to associate the window with.
        /// @param aName The name to give the window opened in the new tab.
        /// @return The nsIFrameLoaderOwner for the newly opened window.
        ///   // XXXbz is this the right API?
        ///   // See bug 537428
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		System.IntPtr OpenURIInFrame([MarshalAs(UnmanagedType.Interface)] nsIURI aURI, [MarshalAs(UnmanagedType.Interface)] nsIOpenURIInFrameParams @params, short aWhere, int aFlags, ulong aNextTabParentId, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Gecko.CustomMarshalers.AStringMarshaler")] nsAStringBase aName);
		
		/// <summary>
        /// @param  aWindow the window to test.
        /// @return whether the window is the main content window for any
        /// currently open tab in this toplevel browser window.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool IsTabContentWindow([MarshalAs(UnmanagedType.Interface)] nsIDOMWindow aWindow);
		
		/// <summary>
        /// This function is responsible for calling
        /// nsIContentViewer::PermitUnload on each frame in the window. It
        /// returns true if closing the window is allowed. See canClose() in
        /// BrowserUtils.jsm for a simple implementation of this method.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool CanClose();
	}
	
	/// <summary>nsIBrowserDOMWindowConsts </summary>
	public class nsIBrowserDOMWindowConsts
	{
		
		// <summary>
        // Do whatever the default is based on application state, user preferences,
        // and the value of the aContext parameter to openURI.
        // </summary>
		public const short OPEN_DEFAULTWINDOW = 0;
		
		// <summary>
        // Open in the "current window".  If aOpener is provided, this should be the
        // top window in aOpener's window hierarchy, but exact behavior is
        // application-dependent.  If aOpener is not provided, it's up to the
        // application to decide what constitutes a "current window".
        // </summary>
		public const short OPEN_CURRENTWINDOW = 1;
		
		// <summary>
        // Open in a new window.
        // </summary>
		public const short OPEN_NEWWINDOW = 2;
		
		// <summary>
        // Open in a new content tab in the toplevel browser window corresponding to
        // this nsIBrowserDOMWindow.
        // </summary>
		public const short OPEN_NEWTAB = 3;
		
		// <summary>
        // Open in an existing content tab based on the URI. If a match can't be
        // found, revert to OPEN_NEWTAB behavior.
        // </summary>
		public const short OPEN_SWITCHTAB = 4;
		
		// <summary>
        // Internal open new window.
        // </summary>
		public const long OPEN_NEW = 0x0;
		
		// <summary>
        // External link (load request from another application, xremote, etc).
        // </summary>
		public const long OPEN_EXTERNAL = 0x1;
		
		// <summary>
        // Don't set the window.opener property on the window which is being opened.
        // </summary>
		public const long OPEN_NO_OPENER = 0x4;
	}
}
