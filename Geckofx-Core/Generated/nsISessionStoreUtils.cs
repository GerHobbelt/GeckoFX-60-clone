// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsISessionStoreUtils.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// A callback passed to nsISessionStoreUtils.forEachNonDynamicChildFrame().
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("8199ebf7-76c0-43d6-bcbe-913dd3de3ebf")]
	public interface nsISessionStoreUtilsFrameCallback
	{
		
		/// <summary>
        /// handleFrame() will be called once for each non-dynamic child frame of the
        /// given parent |frame|. The second argument is the |index| of the frame in
        /// the list of all child frames.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void HandleFrame(mozIDOMWindowProxy frame, uint index);
	}
	
	/// <summary>
    /// SessionStore utility functions implemented in C++ for performance reasons.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("2be448ef-c783-45de-a0df-442bccbb4532")]
	public interface nsISessionStoreUtils
	{
		
		/// <summary>
        /// Calls the given |callback| once for each non-dynamic child frame of the
        /// given |window|.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void ForEachNonDynamicChildFrame(mozIDOMWindowProxy window, [MarshalAs(UnmanagedType.Interface)] nsISessionStoreUtilsFrameCallback callback);
		
		/// <summary>
        /// Creates and returns an event listener that filters events from dynamic
        /// docShells. It forwards those from non-dynamic docShells to the given
        /// |listener|.
        ///
        /// This is implemented as a native filter, rather than a JS-based one, for
        /// performance reasons.
        /// </summary>
		[return: MarshalAs(UnmanagedType.Interface)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		nsIDOMEventListener CreateDynamicFrameEventFilter([MarshalAs(UnmanagedType.Interface)] nsIDOMEventListener listener);
	}
}
