// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsIRaceCacheWithNetwork.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    /// This holds methods used to race the cache with the network for a specific
    /// channel. This interface is was designed with nsHttpChannel in mind, and it's
    /// expected this will be the only class implementing it.
    /// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("4d963475-8b16-4c58-b804-8a23d49436c5")]
	public interface nsIRaceCacheWithNetwork
	{
		
		/// <summary>
        /// TEST ONLY: The following methods are for testing purposes only. Do not use
        /// them to do anything important in your code.
        /// ***************************************************************************
        ///  /**
        /// Triggers network activity after given timeout. If timeout is 0, network
        /// activity is triggered immediately. If the cache.asyncOpenURI callbacks
        /// have already been called, the network activity may have already been triggered
        /// or the content may have already been delivered from the cache, so this
        /// operation will have no effect.
        ///
        /// @param timeout
        /// - the delay in milliseconds until the network will be triggered.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Test_triggerNetwork(int timeout);
		
		/// <summary>
        /// Normally a HTTP channel would immediately call AsyncOpenURI leading to the
        /// cache storage to lookup the cache entry and return it. In order to
        /// simmulate real life conditions where fetching a cache entry takes a long
        /// time, we set a timer to delay the operation.
        /// Can only be called on the main thread.
        ///
        /// @param timeout
        /// - the delay in milliseconds until the cache open will be triggered.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Test_delayCacheEntryOpeningBy(int timeout);
		
		/// <summary>
        /// Immediatelly triggers AsyncOpenURI if the timer hasn't fired.
        /// Can only be called on the main thread.
        /// This is only called in tests to reliably trigger the opening of the cache
        /// entry.
        /// @throws NS_ERROR_NOT_AVAILABLE if opening the cache wasn't delayed.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Test_triggerDelayedOpenCacheEntry();
	}
}
