// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
// 
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
// 
// <remarks>
// Generated by IDLImporter from file nsITabParent.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace Gecko
{
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.InteropServices.ComTypes;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
    ///This Source Code Form is subject to the terms of the Mozilla Public
    /// License, v. 2.0. If a copy of the MPL was not distributed with this
    /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("8e49f7b0-1f98-4939-bf91-e9c39cd56434")]
	public interface nsITabParent
	{
		
		/// <summary>
        ///This Source Code Form is subject to the terms of the Mozilla Public
        /// License, v. 2.0. If a copy of the MPL was not distributed with this
        /// file, You can obtain one at http://mozilla.org/MPL/2.0/. </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void GetChildProcessOffset(ref int aCssX, ref int aCssY);
		
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetUseAsyncPanZoomAttribute();
		
		/// <summary>
        /// Manages the docshell active state of the remote browser. Setting the
        /// docShell to be active will also cause it to render layers and upload
        /// them to the compositor. Setting the docShell as not active will clear
        /// those layers.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetDocShellIsActiveAttribute();
		
		/// <summary>
        /// Manages the docshell active state of the remote browser. Setting the
        /// docShell to be active will also cause it to render layers and upload
        /// them to the compositor. Setting the docShell as not active will clear
        /// those layers.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetDocShellIsActiveAttribute([MarshalAs(UnmanagedType.U1)] bool aDocShellIsActive);
		
		/// <summary>
        /// When set to true, this tells the child to paint and upload layers to
        /// the compositor. When set to false, previous layers are cleared from
        /// the compositor, but only if preserveLayers is also set to false.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetRenderLayersAttribute();
		
		/// <summary>
        /// When set to true, this tells the child to paint and upload layers to
        /// the compositor. When set to false, previous layers are cleared from
        /// the compositor, but only if preserveLayers is also set to false.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetRenderLayersAttribute([MarshalAs(UnmanagedType.U1)] bool aRenderLayers);
		
		/// <summary>
        /// True if layers are being rendered and the compositor has reported
        /// receiving them.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetHasLayersAttribute();
		
		/// <summary>
        /// As an optimisation, setting the docshell's active state to
        /// inactive also triggers a layer invalidation to free up some
        /// potentially unhelpful memory usage. Calling preserveLayers
        /// will cause the layers to be preserved even for inactive
        /// docshells.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void PreserveLayers([MarshalAs(UnmanagedType.U1)] bool aPreserveLayers);
		
		/// <summary>
        /// During interactions where painting performance
        /// is more important than scrolling, we may temporarily
        /// suppress the displayport. Each enable called must be matched
        /// with a disable call.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SuppressDisplayport([MarshalAs(UnmanagedType.U1)] bool aEnabled);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		ulong GetTabIdAttribute();
		
		/// <summary>
        /// The OS level process Id of the related child process.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		int GetOsPidAttribute();
		
		/// <summary>
        /// Navigate by key. If aForDocumentNavigation is true, navigate by document.
        /// If aForDocumentNavigation is false, navigate by element.
        ///
        /// If aForward is true, navigate to the first focusable element or document.
        /// If aForward is false, navigate to the last focusable element or document.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void NavigateByKey([MarshalAs(UnmanagedType.U1)] bool aForward, [MarshalAs(UnmanagedType.U1)] bool aForDocumentNavigation);
		
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetHasContentOpenerAttribute();
		
		/// <summary>
        /// True if we've previously received layers for this tab when switching to
        /// it.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetHasPresentedAttribute();
		
		/// <summary>
        /// Ensures that the content process which has this tab parent has all of the
        /// permissions required to load a document with the given principal.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void TransmitPermissionsForPrincipal([MarshalAs(UnmanagedType.Interface)] nsIPrincipal aPrincipal);
		
		/// <summary>
        /// True if any of the frames loaded in the TabChild have registered
        /// an onbeforeunload event handler.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool GetHasBeforeUnloadAttribute();
		
		/// <summary>
        /// Notify APZ to start autoscrolling.
        /// (aAnchorX, aAnchorY) are the coordinates of the autoscroll anchor,
        /// in CSS coordinates relative to the screen. aScrollId and
        /// aPresShellId identify the scroll frame that content chose to scroll.
        /// Returns whether we were successfully able to notify APZ.
        /// If this function returns true, APZ (which may live in another process)
        /// may still reject the autoscroll, but it's then APZ's reponsibility
        /// to notify content via an "autoscroll-rejected-by-apz" message.
        /// </summary>
		[return: MarshalAs(UnmanagedType.U1)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		bool StartApzAutoscroll(float aAnchorX, float aAnchorY, System.IntPtr aScrollId, uint aPresShellId);
		
		/// <summary>
        /// Notify APZ to stop autoscrolling.
        /// aScrollId and aPresShellId identify the scroll frame that is being
        /// autoscrolled.
        /// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void StopApzAutoscroll(System.IntPtr aScrollId, uint aPresShellId);
	}
}
